<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu用户管理</title>
    <url>/2021/09/10/os/Ubuntu%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><p>   <code>adduser</code>命令，添加新的用户</p>
<blockquote>
<p>这个命令很容易理解，顾名思义：add是添加的意思，user是用户的意思，合在一起就是adduser 添加用户，用法也很简单，命令后面直接写上要添加的用户名</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adduser frank</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95cd310d121a4799b15471f1888ea85a~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>只需输入密码，然后一路回车，最后输入y完成新增用户</p>
</blockquote>
<p><strong>如果使用个人用户是没有权限操作的，只能使用root用户</strong></p>
<p>现在可以查看<code>home</code>目录下，会发现多出一个<code>frank</code>的文件夹</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec4f04cbd1924116a77c00ca6e3ae0fa~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>拿到管理员给创建的用户之后，一般情况下我们都要修改一下默认密码，修改密码的命令是<code>passwd </code>，用法和<code>adduser</code>类似，后面加上用户名即可。</p>
<p>下面修改一下<code>frank</code>的默认密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> passwd frank</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baa2c183952e49ac923c87d98460327d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>命令后面也可以不加用户名，默认是当前用户</p>
</blockquote>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>能添加用户，那就肯定可以删除用户的，下面就使用<code>deluser</code>命令来删除用户</p>
<p><code>deluser</code> 是 <code>delete</code> 和 <code>user</code> 的缩写，delete 是<code>删除</code>的意思，user 是<code>用户</code>的意思。合在一起就是<code>删除用户</code></p>
<p>用法和<code>adduser</code>是一样的，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> deluser frank</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92d479e3746541139109ca67ec9fc40c~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>一行命令成功删除</p>
<p><strong>可以看到删除用户是没有确认过程的，所以要慎用</strong></p>
<p>这个时候在查看一下<code>home</code>目录查看一下用户文件夹还有几个</p>
<p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec4f04cbd1924116a77c00ca6e3ae0fa~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>只使用<code>deluser</code>是不会删除用户目录的，如果想把目录文件一块删除，需要增加一个参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deluser --remove-home frank</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu群组管理</title>
    <url>/2021/09/10/os/Ubuntu%E7%BE%A4%E7%BB%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="群组管理"><a href="#群组管理" class="headerlink" title="群组管理"></a>群组管理</h1><p>在<code>Linux</code>中，每个用户都有一个群组。</p>
<p>那么新建用户的时候并没有指定群组啊，群组是怎么来的呢。</p>
<p>其实我们不需要设置群组，创建用户的时候会默认创建一个和用户名一样的群组，并且把用户添加到这个群组中。</p>
<p>下面来看一下用户的群组</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8b016ba237a4917be44590b5657d9d8~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>可以看到第三列和第四列是相同的。<code>第三列</code>是用户名，<code>第四列</code>是群组名。</p>
<p>了解这些之后下面来操作一下群组</p>
<h2 id="新增群组"><a href="#新增群组" class="headerlink" title="新增群组"></a>新增群组</h2><p>当用户少的时候默认的群组就足以使用了，但是当用户多的时候还是每个用户都在自己的群组中，这种情况就不方便管理了。</p>
<p>下面演示一下新增群组，使用<code>addgroup </code>命令，用法很简单，在后面直接加上要创建的群组就可以了。记得要用<code>root</code>身份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> addgroup admin</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60fb204cbb4f4e7d84016c634818da1e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>看到这个消息，就表示新增成功。</p>
<p>这个时候群组里面还是空的，没有添加用户。</p>
<h2 id="修改用户账户"><a href="#修改用户账户" class="headerlink" title="修改用户账户"></a>修改用户账户</h2><p>假如我要将 <code>dev</code> 这个用户放到我刚创建的 <code>admin</code> 这个群组里，可以这样写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> usermod -g admin dev</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85d32fae8a974d66a209312aaca6d71c~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>可以看到用户dev的群组已经改成了admin</p>
<p>除了使用<code>ll</code>命令之外还可以这样查看用户所在群组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> groups dev</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae1f123767d54f15a5bf7c045d3403f7~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>也可以不添加用户名，直接使用groups命令，则显示当前用户所在群组</p>
</blockquote>
<p>我们也一次把用户添加到多个群组里面，就用<code>-G</code>参数</p>
<p>首先我们先来多创建两个群组，分别是<code>g1</code>和<code>g2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> addgroup g1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> addgroup g2</span></span><br></pre></td></tr></table></figure>
<p>接着运行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> usermod -G admin,dev,g1,g2 dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gropus dev</span></span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/591947837e6947a2b065a854b78de643~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>配合 -g 或 -G 参数时，它会把用户从原先的群组里剔除，加入到新的群组。如果不想离开原先的群组，又想加入新的群组，可以在 -G 参数的基础上加上 -a 参数，表示“追加”。</p>
</blockquote>
<ul>
<li>不添加<code>-a</code>的情况</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> groups dev <span class="comment"># 先查看一下用户所在群组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> usermod -G admin dev <span class="comment"># 修改用户所在群组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groups dev <span class="comment"># 在一次查询用户所在群组</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7021f29ab3e444859879678c12d84de9~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>可以看出，用户的群组只有<code>dev</code>了，之前的群组已经不存在了</p>
<ul>
<li>添加<code>-a</code>的情况<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> groups dev <span class="comment"># 先查看一下用户所在群组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> usermod -aG dev dev <span class="comment"># 修改用户所在群组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> groups dev <span class="comment"># 在一次查询用户所在群组</span></span></span><br></pre></td></tr></table></figure>
<img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56207c151a4d4d759b1e6be4f55b980d~tplv-k3u1fbpfcp-zoom-1.image"></li>
</ul>
<p>可以看出原来的群组还在</p>
<h2 id="删除群组"><a href="#删除群组" class="headerlink" title="删除群组"></a>删除群组</h2><p>用法很简单，在命令后接想要删除的群组名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> delgroup dev</span></span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/048865560eb442e585e60253b6807371~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><code>dev</code>已经不再<code>dev</code>群组，因为它已经被删除</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>linux挂载windows共享文件夹</title>
    <url>/2021/09/10/os/linux%E6%8C%82%E8%BD%BDwindows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>  创建文件夹<br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mnt/share</span></span><br></pre></td></tr></table></figure><br> 安装依赖<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install  cifs-utils</span></span><br></pre></td></tr></table></figure><br>修改/etc/fstab文件，文件最后加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//192.168.16.32/serverapp /mnt/share cifs  defaults  0 0</span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t cifs -o username=&#x27;administrator&#x27;,password=&#x27;**&#x27;  //192.168.16.32/serverapp /mnt/share</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下WebStorm无法输入中文</title>
    <url>/2021/09/10/os/ubuntu%E4%B8%8BWebStorm%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</url>
    <content><![CDATA[<p>你现在使用的输入法具体是什么？另外你是用 ibus 的吗？<br>在启动文件中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export XMODIFIERS=&quot;@im=ibus&quot;</span><br><span class="line">export GTK_IM_MODULE=&quot;ibus&quot;</span><br><span class="line">export QT_IM_MODULE=&quot;ibus&quot;</span><br></pre></td></tr></table></figure>
<p>然后启动 WebStorm 试试。<br>如果不行的话，你再换成下面的试试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure>
<p>如果还不能解决，参考下面的链接操作一下</p>
<p><a href="https://youtrack.jetbrains.com/issue/IDEA-246833">https://youtrack.jetbrains.com/issue/IDEA-246833</a></p>
<p><a href="https://www.jetbrains.com/help/idea/switching-boot-jdk.html">https://www.jetbrains.com/help/idea/switching-boot-jdk.html</a></p>
<p><a href="https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989">https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989</a></p>
<p>以上方案由官方提供，亲测好用<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8383dba1bd194bc0b1dab30d1c757675~tplv-k3u1fbpfcp-zoom-1.image"><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dba08db916174ab4b2507b0676e81ac7~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx代理设置反向代理与缓存</title>
    <url>/2021/09/10/nginx/Nginx%E4%BB%A3%E7%90%86%E4%B8%8E%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcats &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 要定义在http模块之内，server模块之外</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">         <span class="attribute">listen</span> <span class="number">80</span> ;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Scheme $scheme;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://tomcats;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">&#125;    </span><br><span class="line">                                                              </span><br></pre></td></tr></table></figure>

<h2 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /opt/app/cache levels=<span class="number">1</span>:<span class="number">2</span> </span><br><span class="line">keys_zone=lzz_cache:<span class="number">10m</span> max_size=<span class="number">10g</span> inactive=<span class="number">60m</span> use_temp_path=<span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">     <span class="attribute">expires</span>      <span class="number">1h</span>;</span><br><span class="line">     <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Scheme $scheme;</span><br><span class="line">     <span class="attribute">proxy_pass</span> http://tomcats;</span><br><span class="line">     <span class="attribute">proxy_cache</span> lzz_cache;</span><br><span class="line">     <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">304</span> <span class="number">1m</span>;</span><br><span class="line">     <span class="attribute">proxy_cache_valid</span> any <span class="number">10m</span>;</span><br><span class="line">     <span class="attribute">proxy_cache_key</span> $host$uri$is_args$args;</span><br><span class="line">     <span class="attribute">add_header</span> Nginx-Cache <span class="string">&quot;$upstream_cache_status&quot;</span>;</span><br><span class="line">     <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_500http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>proxy</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装Nginx</title>
    <url>/2021/09/10/nginx/linux%E5%AE%89%E8%A3%85Nginx/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y epel-release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y nginx</span></span><br></pre></td></tr></table></figure>

<p>安装成功后，默认的网站目录为： /usr/share/nginx/html</p>
<p>默认的配置文件为：/etc/nginx/nginx.conf</p>
<p>自定义配置文件目录为: /etc/nginx/conf.d/</p>
<h1 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --permanent --zone=public --add-service=http</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --permanent --zone=public --add-service=https</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>开启80和443端口</p>
</blockquote>
<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><p> 启动Nginx<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start nginx</span></span><br></pre></td></tr></table></figure><br> 停止Nginx</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop nginx</span></span><br></pre></td></tr></table></figure>
<p> 重启Nginx<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart nginx</span></span><br></pre></td></tr></table></figure></p>
<p> 查看Nginx状态</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>

<p> 设置开机启动<br> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> nginx</span></span><br></pre></td></tr></table></figure></p>
<p>禁止开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> nginx</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ssl证书结合Nginx搭建https站点(免费证书)</title>
    <url>/2021/09/10/nginx/ssl%E8%AF%81%E4%B9%A6%E7%BB%93%E5%90%88Nginx%E6%90%AD%E5%BB%BAhttps%E7%AB%99%E7%82%B9(%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6)/</url>
    <content><![CDATA[<h1 id="创建ssl证书"><a href="#创建ssl证书" class="headerlink" title="创建ssl证书"></a>创建ssl证书</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /etc/nginx/ssl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/nginx/ssl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -idea -out server.key 1024</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -key server.key -out server.csr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意要加过期时间，默认的有效期很短</p>
</blockquote>
<h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/nginx/conf.d</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim https.conf</span></span><br></pre></td></tr></table></figure>

<p>  输入以下内容</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>       <span class="number">443</span> ssl http2 default_server;</span><br><span class="line">   <span class="attribute">listen</span>       [::]:<span class="number">443</span> ssl http2 default_server;</span><br><span class="line">   <span class="attribute">server_name</span>  _;</span><br><span class="line">   <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line">   <span class="attribute">ssl_certificate</span> <span class="string">&quot;/etc/nginx/ssl/server.crt&quot;</span>;</span><br><span class="line">   <span class="attribute">ssl_certificate_key</span> <span class="string">&quot;/etc/nginx/ssl/server.key&quot;</span>;</span><br><span class="line">   <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">   <span class="attribute">ssl_session_timeout</span>  <span class="number">10m</span>;</span><br><span class="line">   <span class="attribute">ssl_ciphers</span> PROFILE=SYSTEM;</span><br><span class="line">   <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">       <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">       <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>  保存退出并重启<code>nginx</code></p>
<p>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d265c343d89042e4bca60e58e6021324~tplv-k3u1fbpfcp-watermark.image"></p>
<p>   因为我们的证书没有给相关机构认证，所以还是提示不安全，但是不影响我们测试使用</p>
<p> 如果想部署个人服务器的话可以在各大服务器厂商申请免费的ssl证书，也是很方便的，前提是要有自己的域名。</p>
<p> 我是在<a href="https://console.cloud.tencent.com/ssl">腾讯云</a>申请的免费<code>ssl</code>证书。按照官网的提示操作很简单的。</p>
<p>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84c40fa580a4a1fbc14bcca2c5433a4~tplv-k3u1fbpfcp-watermark.image"></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm安装node</title>
    <url>/2021/09/10/node/nvm%E5%AE%89%E8%A3%85node/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用nvm安装"><a href="#使用nvm安装" class="headerlink" title="使用nvm安装"></a>使用<code>nvm</code>安装</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示内容：<br>=&gt; Downloading nvm as script to ‘/home/dhbm/.nvm’<br>=&gt; Appending nvm source string to /home/dhbm/.bashrc<br>=&gt; Appending bash_completion source string to /home/dhbm/.bashrc<br>=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:<br>export NVM_DIR=”$HOME/.nvm”<br>[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvm<br>[ -s “$NVM_DIR/bash_completion” ] &amp;&amp; . “$NVM_DIR/bash_completion” # This loads nvm bash_completion</p>
</blockquote>
<p>按照提示，直接 copy 粘贴以上内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">		[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">		[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm install node <span class="comment"># 安装nodejs</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/ <span class="comment"># 设置淘宝镜像</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>使用babel把es6转成es5</title>
    <url>/2021/09/10/js/%E4%BD%BF%E7%94%A8babel%E6%8A%8Aes6%E8%BD%AC%E6%88%90es5/</url>
    <content><![CDATA[<h1 id="Babel-是什么"><a href="#Babel-是什么" class="headerlink" title="Babel 是什么"></a>Babel 是什么</h1><p>Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p>
<h1 id="Babel能用在哪里"><a href="#Babel能用在哪里" class="headerlink" title="Babel能用在哪里"></a>Babel能用在哪里</h1><h2 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h2><h3 id="使用-npm-初始化项目"><a href="#使用-npm-初始化项目" class="headerlink" title="使用 npm 初始化项目"></a>使用 <code>npm</code> 初始化项目</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir es6-to-es5</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init -y</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Babel"><a href="#安装Babel" class="headerlink" title="安装Babel"></a>安装Babel</h3> <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @babel/core @babel/cli</span></span><br></pre></td></tr></table></figure>

<p>安装完成之后, 你的 <code>package.json</code> 会加入这些代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line"> + &quot;@babel/cli&quot;: &quot;^7.12.8&quot;,</span><br><span class="line"> + &quot;@babel/core&quot;: &quot;^7.12.9&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 现在把 <code>Babel</code> 的运行命令放入到 <code>npm</code> 脚本中, 也是在 <code>package.json</code> 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">+     &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-babelrc配置文件"><a href="#创建-babelrc配置文件" class="headerlink" title="创建.babelrc配置文件"></a>创建.babelrc配置文件</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install @babel/preset-env --save-dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建<code>babel.config.json</code>文件,写入以下内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>环境都配置完成, 下面开始正式写代码了</p>
<h3 id="写一段ES6代码"><a href="#写一段ES6代码" class="headerlink" title="写一段ES6代码"></a>写一段ES6代码</h3><p> 创建 <code>/src/index.js</code></p>
 <figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  mkdir src</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  touch src/index.js</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>写入一个简单的箭头函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello xiaotaideng&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在运行刚刚写好的启动脚本</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 完成之后可以看到目录中新增了一个<code>build</code>文件夹,打开里面的<code>index.js</code>它的内容是这样的</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello xiaotaideng&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sayHello();</span><br></pre></td></tr></table></figure>

<p>现在执行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  node build/index.js</span></span><br></pre></td></tr></table></figure>

<p> 可以正常的输出，到现在好像已经可以正常的使用了</p>
<p><a href="https://github.com/lizeze/es6-to-es5">点击</a>获取源码 </p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>es6</tag>
        <tag>es5</tag>
        <tag>babel</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Java全局异常捕获处理</title>
    <url>/2021/09/10/java/Java%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>为了项目的正常运行中,异常捕获,记录也是非常重要的，方便我们排查问题，定位问题</p>
<h1 id="定义异常"><a href="#定义异常" class="headerlink" title="定义异常"></a>定义异常</h1><p>为了方便定位异常，自定义了几种异常类，方便我们快速定位异常。</p>
<h2 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String code;</span><br><span class="line">    <span class="keyword">protected</span> Integer httpStatusCode = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ParameterException"><a href="#ParameterException" class="headerlink" title="ParameterException"></a>ParameterException</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterException</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ServerErrorException"><a href="#ServerErrorException" class="headerlink" title="ServerErrorException"></a>ServerErrorException</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerErrorException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerErrorException</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="UnAuthenticatedException"><a href="#UnAuthenticatedException" class="headerlink" title="UnAuthenticatedException"></a>UnAuthenticatedException</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnAuthenticatedException</span> <span class="keyword">extends</span> <span class="title">HttpException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnAuthenticatedException</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">401</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ForbiddenException"><a href="#ForbiddenException" class="headerlink" title="ForbiddenException"></a>ForbiddenException</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForbiddenException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForbiddenException</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NotFoundException"><a href="#NotFoundException" class="headerlink" title="NotFoundException"></a>NotFoundException</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">404</span>;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 这里定义了我在项目中常用的几种异常，也可根据实际情况定义自己所需的异常。</p>
<h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><p> 捕获异常需要用到一个注解<code>@ControllerAdvice</code>,关于它的详细解释可查看<a href="https://docs.spring.io/spring-framework/docs/5.0.0.M1/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html">文档</a>。</p>
<p> 使用方法如下，定义一个异常捕获类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这个类就已经实现了捕获全局异常的功能，下面在加上上面定义的几种异常<br>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionAdvice</span> </span>&#123;</span><br><span class="line">   <span class="meta">@ExceptionHandler(UnAuthenticatedException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">unAuthenticatedException</span><span class="params">(UnAuthenticatedException e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getCode());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(ParameterException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleParameterException</span><span class="params">(ParameterException e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getCode());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(ForbiddenException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleForbiddenException</span><span class="params">(ForbiddenException e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.FORBIDDEN).body(e.getCode());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(NotFoundException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleNotFoundException</span><span class="params">(NotFoundException e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getCode());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleRunTimeException</span><span class="params">(RuntimeException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="number">500</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> <code>@ExceptionHandler</code>注解表示该方法捕获的异常类型，就可以在不同的异常中进行不同的处理方式。</p>
<h1 id="记录异常"><a href="#记录异常" class="headerlink" title="记录异常"></a>记录异常</h1><p>  捕获到异常之后我们要记录下来，方便我们对bug的追踪解决。</p>
<p>  记录方法有多种多样的，比如记录到数据库或者<code>log</code>文件中。我使用了第二种方式。</p>
<h2 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h2>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="增加日志配置文件"><a href="#增加日志配置文件" class="headerlink" title="增加日志配置文件"></a>增加日志配置文件</h2><p>   <code>logback.xml</code><br>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台 appender, 几乎是默认的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出的日志文本格式, 其他的 appender 与之相同 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span> %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- info 级别的 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志写入的文件名, 可以是相对目录, 也可以是绝对目录, 如果上级目录不存在会自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>./logs/info/log-stack.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果是 true, 日志被追加到文件结尾; 如果是 false, 清空现存文件. 默认是true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志级别过滤器, 只打 INFO 级别的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 下面2个属性表示: 匹配 level 的接受打印, 不匹配的拒绝打印 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最常用的滚动策略, 它根据时间来制定滚动策略, 既负责滚动也负责触发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置滚动文件规则, 如果直接使用 %d, 默认格式是 yyyy-MM-dd --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./logs/info/log-stack.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留14天的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span> %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- error 级别的 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>./logs/error/log-stack.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./logs/error/log-stack.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留7天的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span> %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- error 级别的 appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>./logs/debug/log-stack.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./logs/debug/log-stack.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留7天的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span> %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 com.github 下的日志打印级别, appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.github&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="写入日志"><a href="#写入日志" class="headerlink" title="写入日志"></a>写入日志</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ParameterException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleParameterException</span><span class="params">(ParameterException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getLocalizedMessage()); </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="完善异常信息"><a href="#完善异常信息" class="headerlink" title="完善异常信息"></a>完善异常信息</h1><p>文章中的异常只定义了<code>code</code>，具体的异常信息可以写在配置文件中或者保存在数据库中，在捕获到异常之后，找到对应的描述信息返回调用者，增加友好度。</p>
<h1 id="完善记录日志"><a href="#完善记录日志" class="headerlink" title="完善记录日志"></a>完善记录日志</h1><p> 以上如果发生了异常，在日志文件中是这样记录的</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10:19:32.024 [http-nio-8080-exec-2] ERROR c.g.e.d.advice.GlobalExceptionAdvice 41 - / by zero</span><br></pre></td></tr></table></figure>
<p>发现记录的行号是在<code>GlobalExceptionAdvice</code>类中，并非是代码真实的位置。</p>
<p>如果要记录到代码的真实位置可以这样实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">getExceptionDetail</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       stringBuilder.append(e.getClass() + System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">       stringBuilder.append(e.getLocalizedMessage() + System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">       StackTraceElement[] arr = e.getStackTrace();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           stringBuilder.append(arr[i].toString() + System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.error(getExceptionDetail(e));</span><br></pre></td></tr></table></figure>
<p>根据实际情况选择适合自己的方式</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><a href="https://github.com/lizeze/exception-demo">Github</a></p>
<p><a href="https://gitee.com/zeze.li/exception-demo">Gitee</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus通用查询工具类</title>
    <url>/2021/09/10/java/MyBatis-Plus%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7%E7%B1%BB.md/</url>
    <content><![CDATA[<blockquote>
<p>mybatis-plus简称MP是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<p>这是官方给的定义，关于mybatis-plus的更多介绍及特性，可以参考mybatis-plus<a href="https://mybatis.plus/">官网</a> 。那么它是怎么增强的呢？其实就是它已经封装好了一些crud方法，我们不需要再写xml了，直接调用这些方法就行，就类似于JPA。</p>
<p>下面是在<code>MP</code>为基础封装了一个查询类，实现了如果需要增加查询条件只需在前端修改即可。             </p>
<h1 id="查询工具"><a href="#查询工具" class="headerlink" title="查询工具"></a>查询工具</h1><ul>
<li>SearchModel<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchModel</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Field&gt; fields;</span><br><span class="line">    <span class="keyword">private</span> String orderField;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;T&gt; <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IPage&lt;T&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageIndex, pageSize);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isEmptyOrNull(orderField)) &#123;</span><br><span class="line">            OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">            orderItem.setAsc(isAsc);</span><br><span class="line">            orderItem.setColumn(orderField);</span><br><span class="line">            page.orders().add(orderItem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryWrapper&lt;T&gt; <span class="title">getQueryModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;T&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Iterator iter = <span class="keyword">this</span>.fields.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            Field field = (Field) iter.next();</span><br><span class="line">            <span class="keyword">switch</span> (field.getQueryMethod()) &#123;</span><br><span class="line">                <span class="keyword">case</span> eq:</span><br><span class="line">                    queryWrapper.eq(<span class="keyword">true</span>, field.getName(), field.getValue());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> like:</span><br><span class="line">                    queryWrapper.like(<span class="keyword">true</span>, field.getName(), field.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isEmptyOrNull(orderField)) &#123;</span><br><span class="line">            queryWrapper.orderBy(<span class="keyword">true</span>, isAsc, orderField);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queryWrapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Field<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Field</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.queryMethod = QueryMethod.eq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Field</span><span class="params">(String name, Object value, QueryMethod queryMethod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.queryMethod = queryMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    <span class="keyword">private</span> QueryMethod queryMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>QueryMethod<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">QueryMethod</span> </span>&#123;</span><br><span class="line">    eq, like</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h2></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;fields&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;v&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;project_code&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;queryMethod&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;type&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;queryMethod&quot;</span>: <span class="string">&quot;like&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;queryMethod&quot;</span>: <span class="string">&quot;like&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;a&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;pageIndex&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;pageSize&quot;</span>: <span class="number">8</span>,</span><br><span class="line"><span class="attr">&quot;orderField&quot;</span>: <span class="string">&quot;type&quot;</span>,</span><br><span class="line"><span class="attr">&quot;isAsc&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在api中传入上面的json对象即可完成一个查询服务,查询条件通过前端传入的字段控制</p>
<h1 id="BaseService"><a href="#BaseService" class="headerlink" title="BaseService"></a>BaseService</h1><ul>
<li><p>IBaseService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">save</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量修改插入</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 ID 删除</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询列表</span></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(SearchModel&lt;T&gt; searchModel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">    <span class="function">Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">    <span class="function">Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 翻页查询</span></span><br><span class="line">    <span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(SearchModel&lt;T&gt; searchModel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">selectOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>BaseServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IBaseService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> M baseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">save</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        baseMapper.insert(entity);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> </span>&#123;</span><br><span class="line">        Integer size = entityList.size();</span><br><span class="line">        <span class="keyword">for</span> (T entity : entityList) &#123;</span><br><span class="line">            baseMapper.insert(entity);</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size == entityList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rs = baseMapper.updateById(entity);</span><br><span class="line">        <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insert(entity) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = RuntimeException.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (T entity : entityList) &#123;</span><br><span class="line">            saveOrUpdate(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.delete(queryWrapper) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.deleteByMap(columnMap) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.deleteBatchIds(idList) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(<span class="keyword">new</span> QueryWrapper&lt;T&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">list</span><span class="params">(SearchModel&lt;T&gt; searchModel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(searchModel.getQueryModel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectBatchIds(idList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectByMap(columnMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;T&gt; <span class="title">page</span><span class="params">(SearchModel&lt;T&gt; searchModel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectPage(searchModel.getPage(), searchModel.getQueryModel());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">selectById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">selectOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>MP实现了mapper层基础的CRUD方法，这里把一些常用的service层的方法整理了一下，又减少了一些代码量</p>
<p> <a href="https://github.com/lizeze/mp-search">代码地址</a></p>
<p> <a href="https://github.com/lizeze/mp-demo">使用示例</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot使用@value注入静态属性</title>
    <url>/2021/09/10/java/Springboot%E4%BD%BF%E7%94%A8@value%E6%B3%A8%E5%85%A5%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Springboot-value-注解注入静态属性"><a href="#Springboot-value-注解注入静态属性" class="headerlink" title="Springboot @value 注解注入静态属性"></a>Springboot @value 注解注入静态属性</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String proxyIp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;cim.http.proxy_ip&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProxyIp</span><span class="params">(String _proxyIp)</span> </span>&#123;</span><br><span class="line">        proxyIp = _proxyIp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接在属性上使用 <code>@value</code> 是无效的，要通过 <code>set</code> 方法注入， <code>class</code> 要加上 <code>@Component</code> 注解</p>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>api自动增加前缀</title>
    <url>/2021/09/10/java/api%E8%87%AA%E5%8A%A8%E5%A2%9E%E5%8A%A0%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<ul>
<li><p>AutoPrefixUrlMapping.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPrefixUrlMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;api-package&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String apiPackagePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class="line">        RequestMappingInfo mappingInfo =  <span class="keyword">super</span>.getMappingForMethod(method, handlerType);</span><br><span class="line">        <span class="keyword">if</span>(mappingInfo != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String prefix = <span class="keyword">this</span>.getPrefix(handlerType);</span><br><span class="line">            <span class="keyword">return</span> RequestMappingInfo.paths(prefix).build().combine(mappingInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappingInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPrefix</span><span class="params">(Class&lt;?&gt; handlerType)</span></span>&#123;</span><br><span class="line">        String packageName = handlerType.getPackage().getName();</span><br><span class="line">        String dotPath = packageName.replaceAll(<span class="keyword">this</span>.apiPackagePath,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dotPath.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>AutoPrefixConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPrefixConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcRegistrations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutoPrefixUrlMapping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">api-package:</span> <span class="string">com.example.demo</span></span><br></pre></td></tr></table></figure>
<ul>
<li>DemoController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/a&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li> 目录结构</li>
</ul>
<img src="/2021/09/10/java/api%E8%87%AA%E5%8A%A8%E5%A2%9E%E5%8A%A0%E5%89%8D%E7%BC%80/api.png" class="" title="目录结构">
<p>请求地址:<a href="http://localhost:8080/api/demo/a">http://localhost:8080/api/demo/a</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建maven私有仓库.</title>
    <url>/2021/09/10/java/%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><p><a href="https://www.sonatype.com/product/repository-oss-download">点击
</a>从官网选择自己适合自己操作系统的安装包，下载完成之后放到一个合适的位置，无需要安装。</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p> 进入<code>nexus-3.30.0-01\bin</code>目录下，输入<code>cmd</code></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01b5e22cbf7b40eab4fd704115ec0571~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>在命令行中输入<code>nexus /run</code>，稍等片刻</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b42cdcc5df0c4b8984e295c7b439f852~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>提示<code>8081</code>端口已经被占用，原来<code>nexus</code>默认使用的端口是<code>8081</code>,关闭正在使用的<code>8081</code>端口之后，在此运行命令稍等片刻启动成功。</p>
<h1 id="登陆系统"><a href="#登陆系统" class="headerlink" title="登陆系统"></a>登陆系统</h1><p>启动成功之在浏览器打开<code>http://localhost:8081/</code>，</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fba587f47f764e12ab8c0ffcabb0cc67~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>初始化完成之后点击<code>Sign in</code>登陆，默认账户是<code>admin</code>,初始密码在<code>nexus-3.30.0-01-win64\sonatype-work\nexus3</code>目录下的<code>admin.password</code>文件中，复制到登陆表单中完成登陆，成功之后会提示重新设置密码，设置一个自己常用的密码即可。</p>
<h1 id="增加阿里代理仓库"><a href="#增加阿里代理仓库" class="headerlink" title="增加阿里代理仓库"></a>增加阿里代理仓库</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34ad4efa144a49af9265d1404d499f61~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76920d2ca8264380b167b2a5de96257d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>输入两个必选项</p>
<p><code>aliyun</code></p>
<p><code>http://maven.aliyun.com/nexus/content/groups/public/</code></p>
<p>保存完成</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c7f21c6038943d5abf204b3ff4cb3e9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>选择<code>Configuration</code> &gt; <code>Repository</code>, 然后双击 <code>maven-public</code></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ce1038d21464c519b207d2b7c650e01~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p> 把<code>aliyun</code>移动到右侧 保存。</p>
<h1 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h1><p>找到<code>maven</code>中的<code>setting.xml</code>,在<code>servers</code>标签中</p>
<p>写入下面的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>password是自己设置的登陆密码</p>
</blockquote>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d5387e245e049c5833b26feedeb3f86~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="在pom文件中加入下面的配置"><a href="#在pom文件中加入下面的配置" class="headerlink" title="在pom文件中加入下面的配置"></a>在pom文件中加入下面的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>User Project Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="发布代码到私有仓库"><a href="#发布代码到私有仓库" class="headerlink" title="发布代码到私有仓库"></a>发布代码到私有仓库</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10c8548941ca45779f197fd35aa41513~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>双击即可</p>
<h1 id="查看发布的项目"><a href="#查看发布的项目" class="headerlink" title="查看发布的项目"></a>查看发布的项目</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad834c71a6d540b1aaaa92a580ab7ae7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h1 id="使用仓库中的项目"><a href="#使用仓库中的项目" class="headerlink" title="使用仓库中的项目"></a>使用仓库中的项目</h1><p>在<code>pom</code>文件中加入下面的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在发布和下载的时候如果遇到权限问题"><a href="#在发布和下载的时候如果遇到权限问题" class="headerlink" title="在发布和下载的时候如果遇到权限问题"></a>在发布和下载的时候如果遇到权限问题</h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79dac5d8a27a4ba3a8e20cd605d19c2e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f1f5bd879b4448f960cdba9000820bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置ssh</title>
    <url>/2021/09/10/git/git%E9%85%8D%E7%BD%AEssh/</url>
    <content><![CDATA[<h2 id="在github上新增ssh"><a href="#在github上新增ssh" class="headerlink" title="在github上新增ssh"></a>在github上新增ssh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf ~/.ssh/*</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;你的邮箱&quot;</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 按回车三次</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>

<h2 id="基础信息配置"><a href="#基础信息配置" class="headerlink" title="基础信息配置"></a>基础信息配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name 你的英文名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email 你的邮箱</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global push.default matching</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global core.quotepath <span class="literal">false</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global core.editor <span class="string">&quot;vim&quot;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>微信扫一扫登录</title>
    <url>/2021/09/10/WeChat/%E5%BE%AE%E4%BF%A1%E6%89%AB%E4%B8%80%E6%89%AB%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>个人网站是无法接入微信扫一扫登录的，只能使用曲线救国的方式，采用小程序了，小程序是可以获取到微信用户的 <code>UnionID</code> 的。</p>
<p>首先第一步要注册一个小程序应用，很简单的，用邮箱申请即可，<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">点击注册</a></p>
<p>注册完成之后就可以进行开发了，我后台服务使用的是node来写的</p>
<h1 id="生成小程序二维码"><a href="#生成小程序二维码" class="headerlink" title="生成小程序二维码"></a>生成小程序二维码</h1><p> 要做扫一扫登录，二维码是不可少的，官方也提供了几种生成二维码的方式。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html">查看生成方式</a></p>
<p> 我使用的是<a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html">A接口</a>，详细信息可查看官方文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN</span><br></pre></td></tr></table></figure>

<p>  从api上可以看出，调用这个接口需要传入成一个 <code>ACCESS_TOKEN</code> ，这个不是我们生成的，需要调用小程序的服务来获取到。</p>
<p>   <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html">ACCESS_TOKEN</a></p>
<p>   获取 <code>ACCESS_TOKEN</code> 示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getWeChatAccessToken = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="string">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="subst">$&#123;appId&#125;</span>&amp;secret=<span class="subst">$&#123;secretKey&#125;</span>`</span></span><br><span class="line">            axios.get(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(res.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">                errorlog.error(e)</span><br><span class="line">                resolve(Common.unifyResponse(<span class="string">&quot;获取微信token失败&quot;</span>, <span class="number">500</span>))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>token过期的时间是由微信服务控制的，拿到之后可以存到redis中，不需要每次都去获取新的</p>
</blockquote>
<p> 获取到token之后就可以调用生成二维码的方法了</p>
<p> 调用示例<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> getQRCode = <span class="function">(<span class="params">access_token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileName = Common.randomNumber()</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=<span class="subst">$&#123;access_token&#125;</span>`</span></span><br><span class="line">        axios.request(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>,</span><br><span class="line">            url,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;pages/login/login?clientId=&#x27;</span>+fileName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            fs.writeFile(Common.config(<span class="string">&quot;qrCode&quot;</span>) + fileName + <span class="string">&quot;.jpeg&quot;</span>, res.data, <span class="string">&quot;binary&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                resolve(fileName)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            errorlog.error(e)</span><br><span class="line">            resolve(Common.unifyResponse(<span class="string">&quot;获取二维码失败&quot;</span>, <span class="number">500</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  返回的是二维码的文件名称</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  LoginRouter.post(<span class="string">&quot;/qrlogin/:clientId&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userId = req[<span class="string">&quot;userId&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> clientId = req.params.clientId</span><br><span class="line">    <span class="keyword">let</span> token = makeToken(userId);</span><br><span class="line">    axios.post(apiConfig.socketUrl, &#123;</span><br><span class="line">        clientId,</span><br><span class="line">        <span class="attr">message</span>: token</span><br><span class="line">    &#125;)</span><br><span class="line">    res.send(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>  处理登录请求，在小程序完成授权之后，调用<code>webSocket</code>服务通知页面授权成功，跳转到首页</p>
<h1 id="页面显示二维码"><a href="#页面显示二维码" class="headerlink" title="页面显示二维码"></a>页面显示二维码</h1>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: api,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#qrcode&#x27;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;/&quot;</span>+data + <span class="string">&quot;.jpeg&quot;</span>)</span><br><span class="line">        webSocketConnect(data)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webSocketConnect</span>(<span class="params">clientId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">        ws = <span class="keyword">new</span> WebSocket(SOCKET_URL + clientId);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;MozWebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">        ws = <span class="keyword">new</span> WebSocket(SOCKET_URL + clientId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;该浏览器不支持websocket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;accessToken&quot;</span>, evt.data)</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">&#x27;me.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>   登录页面调用服务器端生成二维码并显示在页面上，并且连接<code>webSocket</code>服务，等待服务器确认登录。</p>
<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><p> login.js<br>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   Page(&#123;</span><br><span class="line">    <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> scene = <span class="built_in">decodeURIComponent</span>(options.clientId);</span><br><span class="line">        wx.setStorage(&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&quot;clientId&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: scene</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">login</span>: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> util.getLoginInfo()</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="keyword">let</span> clientId = wx.getStorageSync(<span class="string">&#x27;clientId&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> util.httpRequest(&#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;api/wx/qrlogin/&#x27;</span> + clientId</span><br><span class="line">            &#125;)</span><br><span class="line">            wx.switchTab(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;../index/index&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>login.wxml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;login&quot;</span>&gt;</span>授权登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/lizeze/express-leancloud">github</a></p>
<p><a href="http://xx996.cn/jzb/index.html">体验地址</a></p>
]]></content>
      <tags>
        <tag>node</tag>
        <tag>wechat</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>免费获取JetBrains一年全家桶</title>
    <url>/2021/09/10/tool/%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96JetBrains%E4%B8%80%E5%B9%B4%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<p>登录<a href="https://education.github.com/">Github Education</a><br><img src="https://img-blog.csdnimg.cn/img_convert/4bd2e3f02f00c140b28fbfcc0cea026a.png"></p>
<p>点击<code>Get benefits</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/18ae8025125437848fc8e8812fed27ec.png"></p>
<p>点击<code>Get student benefits</code></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c7b7a368e4d2b79e30a2fb57fe288af4.png"></p>
<p>下一步以后上传自己的学生证件和个人信息等待审核完成。</p>
<p>时间多久不太确定，我大概等了一个月，审核通过之后会收到一封邮件</p>
<p>收到成功之后的邮件之后 到<a href="https://www.jetbrains.com/shop/eform/students">这里</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0af30a89da36c9e59a7c04ba04c33fe3.png"></p>
<p>关联上申请时候的github就可以了，关联之后登陆<code>JetBrains</code>账户就可得到授权了</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/93811702d508c41148a59570ff1a04b8.png"></p>
<p> 如果没有学生身份的话，还是建议大家购买正版，拒绝盗版软件，购买正版请点击<a href="https://www.jetbrains.com/">这里</a></p>
]]></content>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>发布jar包到maven中央仓库（2021最新）</title>
    <url>/2021/09/10/java/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%EF%BC%882021%E6%9C%80%E6%96%B0)/</url>
    <content><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装<code>java</code>环境</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1o-wFA-m33JQs-sQJ-DgRaQ </span><br><span class="line">提取码：ux7j</span><br></pre></td></tr></table></figure>
<p>下载到服务器之后解压到指定位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xzf jdk-8u301-linux-x64.tar.gz  -C /usr/java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/profile</span></span><br></pre></td></tr></table></figure>
<p>写入下面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_301</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>保存退出<br>执行<code>source /etc/profile</code>使配置文件生效。</p>
<p>验证是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">  java version &quot;1.8.0_301&quot;</span><br><span class="line">  Java(TM) SE Runtime Environment (build 1.8.0_301-b09)</span><br><span class="line">  Java HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode)</span><br></pre></td></tr></table></figure>
<p>看到这个就表示安装成功了。</p>
<h2 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装<code>maven</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/mvn</span><br><span class="line">$ cd /usr/mvn</span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ tar -zxvf apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>写入下面内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/usr/mvn/apache-maven-3.8.1</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>保存退出<br>执行<code>source /etc/profile</code>使配置文件生效。</p>
<p>验证是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mvn -version</span><br><span class="line">Maven home: /usr/mvn/apache-maven-3.8.1</span><br><span class="line">Java version: 1.8.0_301, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_301/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;4.18.0-240.10.1.el8_3.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>
<h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install git gpg -y</span><br></pre></td></tr></table></figure>
<p>如果已经安装可以跳过这步</p>
<h1 id="注册sonatype账号"><a href="#注册sonatype账号" class="headerlink" title="注册sonatype账号"></a>注册<code>sonatype</code>账号</h1><p> <a href="https://issues.sonatype.org/secure/Signup!default.jspa">点击</a> 注册一个新的账户。</p>
<p> 登录之后新建一个<code>issues</code><br> <img src="https://img-blog.csdnimg.cn/34d16e165bc64fcb8b95b59845e69ba6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> 按要求填写就可以了，主要说一个<code>Group Id</code><br> 如果你的代码时托管在<code>Github</code>上的，那么写<code>Group Id</code>的时候就不能写<br> <code>com.github.xxx</code>了,我使用<code>io</code>开头，详情在<a href="https://central.sonatype.org/changelog/#2021-04-01-comgithub-is-not-supported-anymore-as-a-valid-coordinate">这里</a></p>
<p> 创建完成之后会跳转到这个连接<code>https://issues.sonatype.org/browse/OSSRH-xxxx</code>,当看到这个连接之后，你要在你的<code>Github</code>上创建一个仓库，来证明你是这个<code>Github</code>的主人，仓库的名字就是连接里的<code>OSSRH-xxxx</code>。</p>
<p> 创建后的仓库连接为<code>https://github.com/yourgithubname/OSSRH-xxxx</code>,然后在帖子下面留言告诉管理员这个仓库你已经创建好了名字为<code>OSSRH-xxxx</code>的仓库,这样可以省去他让你证明你是这个账户的拥有者，提高效率。等到管理员回复之后就可以上传<code>jar</code>包了。</p>
<p> 下面是管理员的回复，看到这个就表示完成了。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.github.xxx has been prepared, now user(s) youname can:</span><br><span class="line">Publish snapshot and release artifacts to s01.oss.sonatype.org</span><br><span class="line">Have a look at this section of our official guide for deployment instructions:</span><br><span class="line">https://central.sonatype.org/publish/publish-guide/#deployment</span><br><span class="line"></span><br><span class="line">Depending on your build configuration, your first component(s) might be released automatically after a successful deployment.</span><br><span class="line">If that happens, you will see a comment on this ticket confirming that your artifact has synced to Maven Central.</span><br><span class="line">If you do not see this comment within an hour or two, you can follow the steps in this section of our guide:</span><br><span class="line">https://central.sonatype.org/publish/release/</span><br><span class="line"></span><br><span class="line">######</span><br><span class="line"></span><br><span class="line">As part of our efforts to improve the security and quality posture of the open source supply chain,</span><br><span class="line">we plan to enable additional scanning of dependencies for security alerts soon. Since you&#x27;re already</span><br><span class="line">hosting your source code in Github, you can get these insights today by enabling Sonatype Lift.</span><br><span class="line">Sonatype Lift is free forever on public repositories! Lift tells you about open source vulnerabilities</span><br><span class="line">during code review, and goes beyond open source to scan your code for both code quality and security issues,</span><br><span class="line">providing feedback right in your pull requests.</span><br><span class="line">More information can be found at https://links.sonatype.com/products/lift/github-integration</span><br><span class="line"></span><br><span class="line">######</span><br></pre></td></tr></table></figure>

<h1 id="发布前的准备"><a href="#发布前的准备" class="headerlink" title="发布前的准备"></a>发布前的准备</h1><h2 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改<code>pom</code>文件</h2>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.xxxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">additionalparam</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalparam</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- GPG mvn clean deploy -P release -Dgpg.passphrase=YourPassphase --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MIT License<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/xxx/xxx/xxxxxx/master/LICENSE<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo,manual<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/xxx/xxxx.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/xxxx/xxxx.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/xxxx/xxxxx<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>只需修改和自己相关的内容即可，文中用<code>xxxx</code>表示，其他的不需要修改</p>
<p><code>Group Id</code>一定要和申请的保持一致</p>
<h2 id="上传gpg-key"><a href="#上传gpg-key" class="headerlink" title="上传gpg key"></a>上传<code>gpg key</code></h2> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  gpg generate-key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照提示输入用户名和邮箱，最后会输入一个密码，记住这个密码下面会用</span> </span><br></pre></td></tr></table></figure>

<h3 id="将公钥发送到PGP密钥服务器"><a href="#将公钥发送到PGP密钥服务器" class="headerlink" title="将公钥发送到PGP密钥服务器"></a>将公钥发送到PGP密钥服务器</h3> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">   gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 6107DF0A8EE6A62EABFDD12914F722543E7D2C1E</span></span><br></pre></td></tr></table></figure>
<p> 返回结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg: 将密钥‘14F722543E7D2C1E’上传到 hkp://keyserver.ubuntu.com:11371</span><br></pre></td></tr></table></figure>
<p>验证是否上传成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">   gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 6107DF0A8EE6A62EABFDD12914F722543E7D2C1E</span></span><br></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg: 密钥 14F722543E7D2C1E：“houbb &lt;XXX@XX.com&gt;”未改变</span><br><span class="line">gpg: 合计被处理的数量：1</span><br><span class="line">gpg:           未改变：1</span><br></pre></td></tr></table></figure>

<h2 id="setting-xml"><a href="#setting-xml" class="headerlink" title="setting.xml"></a><code>setting.xml</code></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>sonatype账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>sonatype密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg2<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>gpg公钥的密码<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意判断<code>mvn</code>使用的<code>setting.xml</code>是哪里的，一般在<code>mvn</code>主目录下的<code>conf</code>文件夹和用户目录下的<code>.m2</code>文件夹</p>
<h1 id="上传程序"><a href="#上传程序" class="headerlink" title="上传程序"></a>上传程序</h1><p>在项目根目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn clean deploy</span></span><br></pre></td></tr></table></figure>
<p>稍等片刻会出现一个窗口，输入<code>gpg</code>的密码</p>
<p><img src="https://img-blog.csdnimg.cn/3432ac48ec174e53990e7a3296fdb385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="看到这个表示发布成功"></p>
<p> 看到这个表示已经上传成功了。</p>
<p> 上传成功之后登录到<code>https://s01.oss.sonatype.org/</code>,账号就是一开始注册的sonatype账号。</p>
<p> 登录之后会点击<code>Staging Repositories</code>会看到这个页面，选中记录点击<code>close</code>,成功之后点击<code>Release</code>。</p>
<p> 到这步就已经大功告成了,稍等片刻就可以在这里看到上传的包了</p>
<p> 比如 <code>Group Id</code>是<code>io.github.xxx</code></p>
<p>  <code>artifactId</code>是<code>tool</code></p>
<p>   <code>version</code>是<code>1.0.0</code>,</p>
<p> 查看地址就是<code>https://repo.maven.apache.org/maven2/io/github/xxx/tool/1.0.0</code></p>
<p> 如果上面这个连接可以查到，就已经可以在项目中使用了。同步到中央仓库的时间不太确定。</p>
<p>发布成功之后去帖子上回复一下，告诉管理员发布成功了。</p>
<p> <img src="https://img-blog.csdnimg.cn/689a5fa7f23b4d76890e46a39b577421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul>
<li><p>执行<code>mvn deploy</code>的时候总是返回<code>401</code> 错误，找了各种办法都不能解决，重新注册了个账户就可以了，不知道是为什么。</p>
</li>
<li><p><code>repository</code>地址已经改变了，现在网上大部分的文章都是旧的，新的是这样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ossrh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://central.sonatype.org/publish/publish-maven/">官方文档</a>有最新的配置信息，遇到问题之后还是要先查官方文档</p>
</li>
<li><p>在<code>centos</code>发布时报错<br><code>Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign</code></p>
<p><a href="https://blog.csdn.net/li5672/article/details/119564796">解决方法</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>gpg</tag>
      </tags>
  </entry>
  <entry>
    <title>使用第三方授权登录自己的网站</title>
    <url>/2021/09/10/tool/%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/4739bc34bb234f67bb546870ebcdf6be.png" alt="在这里插入图片描述"></p>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="注册应用"><a href="#注册应用" class="headerlink" title="注册应用"></a>注册应用</h2><p>如果想要使用<code>Github</code>为应用授权的话，要先去自己的账户上注册一个应用，<a href="https://github.com/settings/developers">点击</a>注册。</p>
<p><img src="https://img-blog.csdnimg.cn/37197da007f540dfb6a3bf153261ec8e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAeHjlsI_lj7Dnga8=,size_49,color_FFFFFF,t_70,g_se,x_16" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xl0CN1FD-1629897178733)(https://imgblog.csdnimg.cn/99253549a82d43258425957b20d75b21.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAeHjlsI_lj7Dnga8=,size_54,color_FFFFFF,t_70,g_se,x_16)]"></p>
<p>名称随便输入，写上自己网站的主页，最后一个是授权成功之后回调的页面。</p>
<p>创建成功之后会看到这个 </p>
<p><img src="https://img-blog.csdnimg.cn/b2daf14dc5bc4132a0f7d18e865a30f0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAeHjlsI_lj7Dnga8=,size_60,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="跳转到Github授权页面"><a href="#跳转到Github授权页面" class="headerlink" title="跳转到Github授权页面"></a>跳转到Github授权页面</h2><p> 点一下<code>Generate a new client secret</code>会生成一个秘钥，只会出现一次，要保存好它，不要泄露出去。后面会用到的。</p>
<p>下面开始写代码了，只是做一个简单的示例，没有特别复杂的。就是文档顶部的四种类型。图片是在<a href="https://www.iconfont.cn/">iconfont</a>找到，这个不做过多描述了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">github</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     location.href = <span class="string">`https://github.com/login/oauth/authorize?client_id=39b050937104c9618fee&amp;redirect_uri=http://localhost/me.html`</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>当点击<code>Github</code>图标之后会调用这个方法，跳转到授权页面，上面那个用到两个参数</p>
<ul>
<li>client_id<br>就是上面应用的<code>client_id</code>，千万不要把<code>secret</code>放在前端，不能暴露出来的</li>
<li>redirect_uri<br> 授权成功返回的页面，上面也提到过的。</li>
</ul>
<p> 调用方法之后会跳转到这个页面，输入账号密码登录就可以了。<br><img src="https://img-blog.csdnimg.cn/743fa3f0d04c4673ab0b3268fe77634d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAeHjlsI_lj7Dnga8=,size_52,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>密码验证成功之后会跳转到<code>http://localhost/me.html?code=ffwgregregregre</code>,记住这个<code>code</code>，后面会用到的。</p>
<h2 id="获取到授权码"><a href="#获取到授权码" class="headerlink" title="获取到授权码"></a>获取到授权码</h2><p>在授权页面授权成功之后，会得到一个授权码，就是上面的<code>code</code>，拿到这个去后台服务获取用户信息。</p>
<p> 要获取到用户信息首页要使用<code>授权码</code>得到一个令牌，使用这个令牌向<code>Github</code>请求用户信息。</p>
<h2 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;github/&#123;code&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getUserInfo</span><span class="params">(<span class="meta">@PathVariable</span> String code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String clientId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String secret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.SOCKS, <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1090</span>));</span><br><span class="line">    <span class="comment">//获取访问令牌</span></span><br><span class="line">    String body = HttpRequest.post(</span><br><span class="line">           String.format(<span class="string">&quot;https://github.com/login/oauth/access_token?client_id=%s&amp;client_secret=%s&amp;code=%s&quot;</span>, clientId, secret, code)</span><br><span class="line">    ).header(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>).</span><br><span class="line">            setProxy(proxy).</span><br><span class="line">            execute().</span><br><span class="line">            body();</span><br><span class="line"></span><br><span class="line">    GithubTokenResponse githubTokenResponse = JSON.parseObject(body, GithubTokenResponse.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用令牌获取用户信息</span></span><br><span class="line">    String userInfo = HttpRequest.get(<span class="string">&quot;https://api.github.com/user&quot;</span>).</span><br><span class="line">            setProxy(proxy).</span><br><span class="line">            header(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>).</span><br><span class="line">            header(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token &quot;</span> + githubTokenResponse.getAccess_token())</span><br><span class="line">            .execute().body();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>GithubTokenResponse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubTokenResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String access_token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String scope;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String token_type;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;avatar&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> code = getQueryVariable(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    ajaxGet(<span class="string">&quot;github/&quot;</span> + code, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> user = data;</span><br><span class="line">      avatar.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      avatar.src = user.avatar_url;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).innerHTML = user.name;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><p><code>Gitee</code>和<code>Github</code>基本是一样的，也是要先注册一个应用，地址在<a href="https://gitee.com/oauth/applications/new">这里</a>，不过多描述了，直接上代码。</p>
<h2 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;gitee/&#123;code&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getGiteeUser</span><span class="params">(<span class="meta">@PathVariable</span> String code)</span> </span>&#123;</span><br><span class="line">    String clientId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String secret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String redirect_uri =  <span class="string">&quot;http://localhost/gitee.html&quot;</span>;</span><br><span class="line">    String url = String.format(<span class="string">&quot; https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=%s&amp;client_id=%s&amp;redirect_uri=%s&amp;client_secret=%s&quot;</span>, code, clientId, redirect_uri, secret);</span><br><span class="line">    String body = HttpRequest.post(url).execute().body();</span><br><span class="line">    GithubTokenResponse githubTokenResponse = JSON.parseObject(body, GithubTokenResponse.class);</span><br><span class="line">    String userInfo = HttpRequest.get(<span class="string">&quot;https://gitee.com/api/v5/user?access_token=&quot;</span> + githubTokenResponse.getAccess_token()).execute().body();</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(userInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h2><p> 与<code>Github</code>一致</p>
<h1 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h1><p><code>Email</code>实现的思路大致就是，输入邮箱之后，后台会向邮箱发送一个链接，通过这个链接激活账户。</p>
<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱地址&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;register()&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> value = email.value;</span><br><span class="line">     <span class="keyword">if</span> (value) &#123;</span><br><span class="line">       ajaxPost(<span class="string">&quot;email/create&quot;</span>, &#123; <span class="attr">email</span>: value &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data);</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/email/create&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">createEmailUrl</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> <span class="keyword">throws</span> UnsupportedEncodingException, MessagingException </span>&#123;</span><br><span class="line">    String token = JwtToken.makeToken(map.get(<span class="string">&quot;email&quot;</span>), <span class="string">&quot;abc&quot;</span>, <span class="number">60</span> * <span class="number">30</span>);</span><br><span class="line">     <span class="comment">//注意，QQ邮箱或者163邮箱使用的不是登录密码，要去账户里生成授权码</span></span><br><span class="line">    SendEmail sendEmail = <span class="keyword">new</span> SendEmail(<span class="string">&quot;123@qq.com&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">    sendEmail.setSubject(<span class="string">&quot;邮箱注册&quot;</span>);</span><br><span class="line">    String emailContent = String.format(<span class="string">&quot;&lt;a href=&#x27;%sauthemail.html?code=%s&#x27;&gt;点击注册&lt;/a&gt;,30分钟内有效&quot;</span>, pageUrl, token);</span><br><span class="line">    sendEmail.addContent(emailContent);</span><br><span class="line">    sendEmail.addReceive(<span class="keyword">new</span> ReceiveAccount(map.get(<span class="string">&quot;email&quot;</span>), <span class="string">&quot;xx996用户&quot;</span>, Message.RecipientType.TO));</span><br><span class="line">    sendEmail.setPersonal(<span class="string">&quot;xx996管理员&quot;</span>);</span><br><span class="line">    sendEmail.saveChange();</span><br><span class="line">    sendEmail.sendEmail();</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="验证邮件"><a href="#验证邮件" class="headerlink" title="验证邮件"></a>验证邮件</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/email/&#123;code&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">emailInfo</span><span class="params">(<span class="meta">@PathVariable</span> String code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span> (!JwtToken.verifyToken(code, <span class="string">&quot;abc&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">          ResponseEntity.ok().body((map.put(<span class="string">&quot;mess&quot;</span>, <span class="string">&quot;身份认证失败&quot;</span>)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      String emial = JwtToken.getClaims(code, <span class="string">&quot;abc&quot;</span>).get().get(<span class="string">&quot;uid&quot;</span>).asString();</span><br><span class="line">      map.put(<span class="string">&quot;mess&quot;</span>, emial);</span><br><span class="line">      <span class="keyword">return</span> ResponseEntity.ok().body(map);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> code = getQueryVariable(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    ajaxGet(<span class="string">&quot;email/&quot;</span> + code, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#h1&quot;</span>).text(data.mess);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h1><p>这里微信登录是使用小程序实现的，个人是无法申请微信登录的。</p>
<p><a href="https://blog.csdn.net/li5672/article/details/111170634">微信扫一扫登录(使用小程序实现)</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>项目中使用到的工具</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xx996<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-tool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xx996<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>wechat</tag>
        <tag>gitee</tag>
        <tag>github</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>使用typescript与webpack搭建开发环境(一)</title>
    <url>/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%B8%80)/</url>
    <content><![CDATA[<p>使用typescript与webpack搭建开发环境</p>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn init -y</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本文全部使用yarn命令，没有安装的可以执行下面使用npm安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g yarn</span></span><br></pre></td></tr></table></figure>

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p> <img src="https://img-blog.csdnimg.cn/20210307115029359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>将上面内容拷贝到项目中的<code>package.json</code>文件中，执行安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn install</span> </span><br></pre></td></tr></table></figure>

<h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><h2 id="初始化tsconfig-json"><a href="#初始化tsconfig-json" class="headerlink" title="初始化tsconfig.json"></a>初始化tsconfig.json</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tsc --init</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果出现tsc不是正常的命令错误提示 可在命令前面添加<code>npx</code> 然后在执行<br>执行成功之后修改tsconfig,写入以下内容</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210307115618672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>更多配置选项可参考<a href="https://www.typescriptlang.org/tsconfig">官方文档</a></p>
</blockquote>
<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p>在项目根目录下增加<code>webpack.config.js</code>,内容如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210307115108907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>更多配置选项可参考<a href="https://webpack.js.org/guides/">官方文档</a><br>到这里项目的配置项基本已经全部完成了，下面开始写代码</p>
</blockquote>
<h1 id="增加第一个ts文件"><a href="#增加第一个ts文件" class="headerlink" title="增加第一个ts文件"></a>增加第一个ts文件</h1><p>在项目目录增加<code>src</code>文件夹，并创建第一个文件<code>index.ts</code>,内容如下<br><img src="https://img-blog.csdnimg.cn/20210307115200520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70"></p>
<p>完成之后运行一下项目，验证一下</p>
<h1 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h1><p>项目启动有两种方式，一种是直接在终端中输入<code>webpack serve</code>来启动或者使用<code>yarn</code>命令启动，我们使用第二种方式。<br>首先配置<code>yarn</code>的启动脚本</p>
<p>在<code>package.json</code>中增加以下代码</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们就可以在终端中直接输入<code>yarn start</code>来启动项目了，执行之后会看到以下提示<br><img src="https://img-blog.csdnimg.cn/20210307115211886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>项目顺利启动，并在本地启动了一个端口为<code>8080</code>的服务,我们可以直接在浏览器中那个访问</p>
<p><code>http://localhost:8080/</code></p>
<p><img src="https://img-blog.csdnimg.cn/20210307115228200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 获取源码点击<a href="https://github.com/lizeze/webpack-ts-demo">这里</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用typescript与webpack搭建开发环境(二)</title>
    <url>/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%BA%8C)/</url>
    <content><![CDATA[<p><strong>静态资源的引入</strong></p>
<a href="/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%B8%80)/" title="上一章">上一章</a>中已经搭建好开发环境，下面开始逐渐丰富项目的内容，本章是静态资源的引入。

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p><code>webpack</code>默认是只认识<code>JavaScript</code>的，只知道该怎么处理它，如果项目中出现了其他类型的文件，并且也希望<code>webpack</code>对它进行打包的时候，就要安装对应的<code>loader</code>了。</p>
<p> <code>loader</code>是什么，下面内容源自<code>webpack</code><a href="https://www.webpackjs.com/concepts/loaders/">中文网站</a></p>
<blockquote>
<p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p>
</blockquote>
<h1 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h1> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add css-loader style-loader -D</span></span><br></pre></td></tr></table></figure>
<p> 在<code>src</code>文件夹中创建第一个<code>css</code>文件，命名为<code>index.css</code></p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.hello</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 修改<code>index.ts</code>文件<br> <img src="https://img-blog.csdnimg.cn/img_convert/27d15fd81d28dc2b3526209eb0a4eee0.png"></p>
<p>修改<code>webpack.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">       <span class="attr">rules</span>: [</span><br><span class="line">         +  &#123;</span><br><span class="line">         +    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">         +    use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">         + &#125;</span><br><span class="line">       ],</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h1><p>  <code>file-loader</code>用于引入图片文件</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add file-loader -D</span></span><br></pre></td></tr></table></figure>
<p>  修改<code>index.ts</code>文件，并在src文件夹内增加一张<code>png</code>图片</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span>  <span class="string">&quot;./index.png&quot;</span></span><br><span class="line"><span class="keyword">let</span> image: HTMLImageElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">image.src = img;</span><br><span class="line"><span class="built_in">document</span>.body.append(image);</span><br></pre></td></tr></table></figure>
<p>  修改<code>webpack.config.js</code><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">     <span class="attr">rules</span>: [</span><br><span class="line">         +&#123;</span><br><span class="line">         +   test: <span class="regexp">/\.(png|jpe?g|gif)$/i</span>,</span><br><span class="line">         +  use:[<span class="string">&#x27;file-loader&#x27;</span>],</span><br><span class="line">         +&#125;,</span><br><span class="line">     ],</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>关于<code>css</code>和<code>image</code>的配置就是这些了，现在运行启动命令就可以看到网页上的字已经是红色了，并且添加了一张图片</p>
<p><a href="https://webpack.js.org/concepts/loaders/">更多loader</a></p>
<p><a href="https://github.com/lizeze/webpack-ts-demo">获取代码</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用typescript与webpack搭建开发环境(三)</title>
    <url>/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%B8%89)/</url>
    <content><![CDATA[<p><strong>开发环境设置</strong></p>
 <a href="/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%BA%8C)/" title="上一章">上一章</a>
<p>在日常开发的过程中，debug是避免不了的，我们都知道<code>webpack</code>是把文件打包了的，对于<code>debug</code>来说是非常不方便的，本章主要说一下怎么<code>debug</code></p>
<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="修改-webpack-config-js"><a href="#修改-webpack-config-js" class="headerlink" title="修改 webpack.config.js"></a>修改 webpack.config.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// mode: &quot;development&quot;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>把这行代码注释掉</p>
<h2 id="新增一个ts文件"><a href="#新增一个ts文件" class="headerlink" title="新增一个ts文件"></a>新增一个ts文件</h2><p>在<code>src</code>目录下新增一个名为<code>Person.ts</code>的文件，内容如下<br><img src="https://img-blog.csdnimg.cn/img_convert/b922ae65ede35dd2b38ca147b3d50d98.png"></p>
<h2 id="修改index-ts文件"><a href="#修改index-ts文件" class="headerlink" title="修改index.ts文件"></a>修改index.ts文件</h2><p>之前的代码全部注释或删除，新增以下内容<br><img src="https://img-blog.csdnimg.cn/img_convert/db9d0c53dd9f31f963331604d20430f1.png"></p>
<p>内容准备完成，现在来启动项目实践debug</p>
<h1 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h1><p>执行<code>yarn start</code> 现在开始调试项目<br><img src="https://img-blog.csdnimg.cn/img_convert/6969296b6bc08265cb665320458de936.png"></p>
<p>启动之后我们会发现在终端中会出现这样一个提示，出现这个提示的原因是因为我们在第一步修改的<code>webpack.config.js</code>文件，<code>webpack</code>不知道该以什么模式启动项目了。<br><code>mode</code>的类型有两个，分别是<code>development</code>和<code>production</code>,分别代表开会环境和正式环境。稍后在进行配置。</p>
<p>接下来打开浏览器会看到控制台</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e0c1755a8f3431461ec4b92db3d3cdea.png"></p>
<p>我们在调用方法的时候传入的参数是<code>undefined</code>,所以报这个错了，我们也知道怎么去改，可是在开发项目的过程中不可能每一个地方都记得特别清楚，我们是需要控制台去精准的提示给我们是哪里报凑了，从上图中我们可以看到是<code>main.js</code>文件的第2行报的错，我们点击它定位到错误位置。<br><img src="https://img-blog.csdnimg.cn/img_convert/ce1dbd50a9adab2a2ee076cc8e41ea25.png"><br>出现在眼前的是这一行压缩的代码，它是打包过的代码，是不利于调试的。我们要使用<code>devtool</code>来解决这个问题</p>
<h1 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h1><blockquote>
<p>选择一种 source map 格式来增强调试过程。不同的值会明显影响到构建(build)和重新构建(rebuild)的速度。</p>
</blockquote>
<p><code>devtool</code>其实就是选择对应的<code>source map</code>，它有很多种，现在来看一下每种都有什么区别。</p>
<h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><p>这种是比较常见的，设置方法就是在<code>webpack.config.js</code>中修改这个属性，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">//恢复设置</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>设置完成之后启动项目看一下效果</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/88f50e2b3809c24b7b5d3b3746e5cf73.png"></p>
<p>精确的提示除了出错的文件和行数，方便我们准确的定位，那webpack究竟是做了什么呢。</p>
<ul>
<li>source-map会给打包后的模块生成soucemap文件</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9950d06b66251cb0753805ebf6d2a0f2.png" alt="debug-sourcemapurl.png"></p>
<p>打包后的模块在最下面引用一个map文件，map文件就是打包后的文件和源文件之间的一个关联文件，里面记录着编译后的代码对应着源码中的位置</p>
<ul>
<li>inline-source-map</li>
</ul>
<p> 使用<code>inline</code>，<code>webpack</code>不会生成独立的<code>map</code>文件，而是将<code>map</code>文件内容以<code>dataURL</code>的形式插入到打包的文件中</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f860fc745a8cb302f7d00111a37a12fb.png" alt="debug-inline.png"></p>
<ul>
<li><p>cheap-source-map<br>它与<code>source-map</code>一样也是会生成独立的<code>map</code>文件，不同的是它不包含源代码中的列信息</p>
</li>
<li><p>module-source-map</p>
</li>
</ul>
<p>生成的<code>map</code>文件中还包含引用的一些第三方库</p>
<ul>
<li>eval-source-map<br>每个模块都被<code>eval</code>执行，并且使用<code>@sourceURL</code>的方式引入<code>map</code>文件<h1 id="不同的环境该使用哪种source-map"><a href="#不同的环境该使用哪种source-map" class="headerlink" title="不同的环境该使用哪种source-map"></a>不同的环境该使用哪种source-map</h1></li>
</ul>
<p>不同环境的配置使用，建议参考官方<a href="https://webpack.js.org/configuration/devtool/#devtool">文档</a>,只有官方文档才是<strong>最新最准确</strong>的</p>
<p><a href="https://github.com/lizeze/webpack-ts-demo">获取代码</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用typescript与webpack搭建开发环境(四)</title>
    <url>/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E5%9B%9B)/</url>
    <content><![CDATA[<p><strong>如何区分开发环境与生成环境</strong></p>
 <a href="/2021/09/10/ts/%E4%BD%BF%E7%94%A8typescript%E4%B8%8Ewebpack%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83(%E4%B8%89)/" title="上一章">上一章</a>讲了开发环境`devtool`的使用，但是官方推荐不同的环境使用不同的配置，那么怎么来区分当前运行的是什么环境呢，这次讲一下这个。

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D webpack-merge</span></span><br></pre></td></tr></table></figure>
<h1 id="调整目录结构"><a href="#调整目录结构" class="headerlink" title="调整目录结构"></a>调整目录结构</h1><p>增加<code>config</code>文件夹，将<code>webpack.config.js</code>文件移动到里面，保留基础配置，删除<code>mode</code>和<code>devtool</code>属性</p>
<p>在<code>config</code>文件夹中增加<code>webpack.conf.dev.js</code>，写入以下内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> devConfig = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = merge.merge(common, devConfig);</span><br></pre></td></tr></table></figure>

<p>修改<code>package.json</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --config config/webpack.conf.dev.js&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>执行 <code>yarn start</code></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>不同的环境创建不同的<code>webpack.conf.xxx.js</code>即可</p>
<p>注意修改<code>webconfig.conf.js</code>中的文件引用路径，因为它的位置改变了</p>
<p><a href="https://github.com/lizeze/webpack-ts-demo/commit/feec9a282047efee507212df04c1a7706ecddcbf">获取代码</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配合后台服务控制文件的下载与预览</title>
    <url>/2021/09/10/nginx/Nginx%E9%85%8D%E5%90%88%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E6%8E%A7%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近接到一个项目，有这样一个需求，需要对部分文件的下载与预览增加权限控制，只允许会员用户使用，找了一些资料之后最后决定使用<code>Nginx</code>配合<code>Java</code>服务来实现这个功能。</p>
<blockquote>
<p>只针对一些业务文件采用此方式，网页中的静态文件尽量不要使用这种方法，以免增加服务器的负担</p>
</blockquote>
<h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><p><img src="https://img-blog.csdnimg.cn/20210328130245299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>配置中使用<code>Nginx</code>开启了一个端口为<code>8086</code>的文件服务器,配置中增加了<code>internal</code>属性，表示文件只允许内部访问。在接收到请求后代理转发给了端口为<code>8080</code>的<code>Java</code>权限认证服务。</p>
<p>这些基本上就是<code>Nginx</code>的全部配置了，不是很复杂，配置完成之后记得重启，确保生效。</p>
<h1 id="Java服务"><a href="#Java服务" class="headerlink" title="Java服务"></a>Java服务</h1><p><img src="https://img-blog.csdnimg.cn/2021032813145673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpNTY3Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>后台使用<code>SpringBoot</code>搭建服务，在认证通过之后通过设置<code>ResponseHeader</code>通知<code>Nginx</code>是否返回请求的文件。</p>
<ul>
<li>Content-Type</li>
<li>Content-Disposition</li>
<li> X-Accel-Redirect<blockquote>
<p>三个主要的header</p>
</blockquote>
更多的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">header</a>介绍</li>
</ul>
<p><a href="https://github.com/lizeze/note/issues/43">完整代码</a></p>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分享几个css生成工具</title>
    <url>/2021/09/10/css/%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AAcss%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<ul>
<li><a href="https://neumorphism.io/#e0e0e0">Neumorphism/Soft UI generator</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fbd74e3e267632293591cdd6d449eb0d.png" alt="image.png"></p>
<ul>
<li><a href="https://shadows.brumm.af/">Smooth Shadow generator</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1b994013ca812d603f87abfa601ddfa2.png" alt="image.png"></p>
<ul>
<li><a href="https://9elements.github.io/fancy-border-radius/">Fancy Border Radius Generator</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/dfe5745563a89dd1f304ba10902f7c92.png" alt="image.png"></p>
<ul>
<li><a href="https://larsenwork.com/easing-gradients/">Easing Gradients</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/77c8492b7924605b91552e60e9c7b437.png" alt="image.png"></p>
<ul>
<li><a href="https://learnui.design/tools/data-color-picker.html">Data Viz Color Palette Generator</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7a45985f49af774ea9329d233cc4e922.png" alt="image.png"></p>
<p>*<a href="https://cssgrid-generator.netlify.app/">CSS Grid Generator</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/54ddf664a2f1c27f119dbe8a2ffe5360.png" alt="image.png"></p>
<p>*<a href="https://accordionslider.com/">CSS Accordion Slider Generator</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4aec11b0212bc25a284dfdc0d6e8249b.png" alt="image.png"></p>
<p> *<a href="https://bennettfeely.com/clippy/">CSS clip-path maker</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ea1c9a3378d007e50c2c4b80e2b3dcc5.png" alt="image.png"></p>
<ul>
<li><a href="https://getwaves.io/">Get Waves</a></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/43c1ab0dae9f762a36caae9f654734a1.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
