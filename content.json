{"meta":{"title":"xx996","subtitle":null,"description":"blog xx996","author":"xx小台灯","url":"https://blog.xx996.top","root":"/"},"pages":[{"title":"","date":"2022-11-29T02:14:12.598Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"google4bf2bf568982ee8b.html","permalink":"https://blog.xx996.top/google4bf2bf568982ee8b.html","excerpt":"","text":"google-site-verification: google4bf2bf568982ee8b.html"},{"title":"分类","date":"2021-09-10T02:14:42.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"categories/index.html","permalink":"https://blog.xx996.top/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-09-10T02:10:25.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"tags/index.html","permalink":"https://blog.xx996.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-11-29T02:14:12.566Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/4a17b156.html","link":"","permalink":"https://blog.xx996.top/article/4a17b156.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"TypeScript记录","slug":"ts/Typescript记录","date":"2022-09-05T07:45:33.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/1bc3f4bd.html","link":"","permalink":"https://blog.xx996.top/article/1bc3f4bd.html","excerpt":"","text":"TS 中 interface 和 type 的区别是什么不同点 type 可用于 string、number、bool、undefined、null 和元组，而 interface 只能描述对象（含数组、函数、包装对象） 同名 interface 会合并，而同名 type 会报错 type 声明的是类型别名，而 interface 声明的是新类型。 相同点 都能描述对象（含数组、函数、包装对象） 都能用于扩展一个类型。type 用交叉类型做到这一点，interface 用 extends 做到这一点。","categories":[],"tags":[{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"}]},{"title":"activeMQ删除队列中的消息","slug":"mq/activeMQ删除队列中的消息","date":"2022-08-11T06:38:38.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/63add551.html","link":"","permalink":"https://blog.xx996.top/article/63add551.html","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637public void removeMessage(String queuesName, String messageId) throws Exception &#123; String jmsUrl=&quot;192.168.14.152:11099&quot; String url = String.format(&quot;service:jmx:rmi:///jndi/rmi://%s/jmxrmi&quot;, jmsUrl); JMXServiceURL urls = new JMXServiceURL(url); JMXConnector connector = JMXConnectorFactory.connect(urls, null); connector.connect(); MBeanServerConnection conn = connector.getMBeanServerConnection(); ObjectName name = new ObjectName(&quot;myDomain:brokerName=localhost,type=Broker&quot;); BrokerViewMBean mBean = (BrokerViewMBean) MBeanServerInvocationHandler.newProxyInstance (conn, name, BrokerViewMBean.class, true); for (ObjectName na : mBean.getQueues()) &#123; QueueViewMBean queueBean = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance (conn, na, QueueViewMBean.class, true); if (queueBean.getName().equals(queuesName)) &#123; queueBean.removeMessage(messageId); break; &#125;// System.out.println(&quot;******************************&quot;);// System.out.println(&quot;队列的名称：&quot; + queueBean.getName());// System.out.println(&quot;队列中剩余的消息数：&quot; + queueBean.getQueueSize());// System.out.println(&quot;消费者数：&quot; + queueBean.getConsumerCount());// System.out.println(&quot;消息入队的数量：&quot; + queueBean.getEnqueueCount());// System.out.println(&quot;消息出队的数量：&quot; + queueBean.getDequeueCount()); &#125; &#125; 修改mq配置 bin/env 12 ACTIVEMQ_SUNJMX_START=&quot;$ACTIVEMQ_SUNJMX_START -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.14.152&quot;ACTIVEMQ_OPTS=&quot;$ACTIVEMQ_OPTS -Djava.rmi.server.hostname=192.168.14.152 -Dcom.sun.management.jmxremote.port=11099 -Dcom.sun.management.jmxremote.rmi.port=11099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false &quot; activemq.xml 1&lt;broker xmlns=&quot;http://activemq.apache.org/schema/core&quot; schedulePeriodForDestinationPurge=&quot;30000&quot; useJmx=&quot;true&quot; brokerName=&quot;localhost&quot; dataDirectory=&quot;$&#123;activemq.data&#125;&quot;&gt; 发送消息 1234567891011121314151617181920Session session = null;Connection connection = null;MessageProducer producer = null;ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(aqUrl);connection = connectionFactory.createConnection();connection.start();session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);Destination destination = session.createQueue(queueName);producer = session.createProducer(destination);TextMessage message = session.createTextMessage();message.setText(messageContent);message.setJMSReplyTo(destination);producer.send(destination, message);producer.send(message);return message.getJMSMessageID();","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"mq","slug":"mq","permalink":"https://blog.xx996.top/tags/mq/"}]},{"title":"统计终端中常用的命令","slug":"tool/统计终端中常用的命令","date":"2022-07-18T08:54:43.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/144939f0.html","link":"","permalink":"https://blog.xx996.top/article/144939f0.html","excerpt":"","text":"12history | awk &#x27;&#123;CMD[$2]++;count++;&#125;END &#123; for (a in CMD)print CMD[a] &quot; &quot; CMD[a]/count*100 &quot;% &quot; a;&#125;&#x27; | grep -v &quot;./&quot; | column -c3 -s &quot; &quot; -t | sort -nr | nl | head -n10","categories":[],"tags":[{"name":"tool","slug":"tool","permalink":"https://blog.xx996.top/tags/tool/"}]},{"title":"Git删除提交到仓库的文件","slug":"git/Git删除提交到仓库的文件","date":"2022-07-18T02:37:58.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/45bcd07d.html","link":"","permalink":"https://blog.xx996.top/article/45bcd07d.html","excerpt":"","text":"1234567$ git rm -r --cached a/2.txt$ git commit -m &quot;删除a目录下的2.txt文件&quot;$ git push origin 分支名称","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.xx996.top/tags/git/"}]},{"title":"RestControllerAdvice返回String时异常","slug":"java/RestControllerAdvice返回String时异常","date":"2022-07-14T01:55:18.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/96cbeb8e.html","link":"","permalink":"https://blog.xx996.top/article/96cbeb8e.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435@RestControllerAdvice(value = &quot;cn.xx996&quot;)public class CommonResponseDataAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123; @Override public boolean supports(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123; return true; &#125; @Override public Object beforeBodyWrite(Object o, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse serverHttpResponse) &#123; CommonResponse&lt;Object&gt; response = new CommonResponse&lt;&gt;(&quot;&quot;, 0); if (null == o) &#123; return response; &#125; else if (o instanceof CommonResponse) &#123; response = (CommonResponse&lt;Object&gt;) o; &#125; else if (o instanceof String) &#123; //返回是String类型时，单独处理。转换成JSON字符串即可 response.setData(o); return JSON.toJSONString(response); &#125; else &#123; response.setData(o); &#125; return response; &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://blog.xx996.top/tags/springboot/"}]},{"title":"nginx反向代理websocket","slug":"nginx/nginx反向代理websocket","date":"2022-07-05T03:52:33.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/efc4f59c.html","link":"","permalink":"https://blog.xx996.top/article/efc4f59c.html","excerpt":"","text":"123456789101112131415161718http &#123; include mime.types; default_type application/octet-stream; map $http_upgrade $connection_upgrade &#123; default upgrade; &#x27;&#x27; close; &#125; location /socketserver &#123; proxy_pass http://127.0.0.1:8082; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade;&#125;&#125;","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"websocket","slug":"websocket","permalink":"https://blog.xx996.top/tags/websocket/"}]},{"title":"jpa动态查询条件","slug":"java/jpa动态查询条件","date":"2022-06-26T13:52:12.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/4a55ce1d.html","link":"","permalink":"https://blog.xx996.top/article/4a55ce1d.html","excerpt":"","text":"12345678@Data@AllArgsConstructorpublic class SearchCriteria &#123; private String key; private Object value; private SearchOperation operation;&#125; 1234567891011121314public enum SearchOperation &#123; GREATER_THAN, LESS_THAN, GREATER_THAN_EQUAL, LESS_THAN_EQUAL, NOT_EQUAL, EQUAL, LIKE, LIKE_START, LIKE_END, IN, NOT_IN&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class Specification&lt;T&gt; implements Specification&lt;T&gt; &#123; private List&lt;SearchCriteria&gt; list = new ArrayList&lt;&gt;(); public void add(SearchCriteria criteria) &#123; list.add(criteria); &#125; @Override public Predicate toPredicate(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder builder) &#123; List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;(); for (SearchCriteria criteria : list) &#123; switch (criteria.getOperation()) &#123; case GREATER_THAN: predicates.add(builder.greaterThan(root.get(criteria.getKey()), criteria.getValue().toString())); break; case LESS_THAN: predicates.add(builder.lessThan(root.get(criteria.getKey()), criteria.getValue().toString())); break; case GREATER_THAN_EQUAL: predicates.add(builder.greaterThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString())); break; case LESS_THAN_EQUAL: predicates.add(builder.lessThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString())); break; case NOT_EQUAL: predicates.add(builder.notEqual(root.get(criteria.getKey()), criteria.getValue())); break; case EQUAL: predicates.add(builder.equal(root.get(criteria.getKey()), criteria.getValue())); break; case LIKE: predicates.add(builder.like(builder.lower(root.get(criteria.getKey())), &quot;%&quot; + criteria.getValue().toString().toLowerCase() + &quot;%&quot;)); break; case LIKE_END: predicates.add(builder.like(builder.lower(root.get(criteria.getKey())), criteria.getValue().toString().toLowerCase() + &quot;%&quot;)); break; case LIKE_START: predicates.add(builder.like(builder.lower(root.get(criteria.getKey())), &quot;%&quot; + criteria.getValue().toString().toLowerCase())); break; case IN: predicates.add(builder.in(root.get(criteria.getKey())).value(criteria.getValue())); break; case NOT_IN: predicates.add(builder.not(root.get(criteria.getKey())).in(criteria.getValue())); break; &#125; &#125; return builder.and(predicates.toArray(new Predicate[0])); &#125;&#125; 123456789101112@PostMappingResponseEntity specification(@RequestBody List&lt;SearchCriteria&gt; searchCriteria) &#123; UserSpecification&lt;UserEntity&gt; appleSpecification = new UserSpecification(); searchCriteria.stream().map( searchCriterion -&gt; new SearchCriteria(searchCriterion.getKey(), searchCriterion.getValue(), searchCriterion.getOperation())).forEach(appleSpecification::add); List&lt;UserEntity&gt; msGenreList = userDao.findAll(appleSpecification); msGenreList.forEach(System.out::println);return ResponseEntity.status(HttpStatus.OK).body(msGenreList);&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"jpa","slug":"jpa","permalink":"https://blog.xx996.top/tags/jpa/"}]},{"title":"idea目录文件显示百分比数字","slug":"idea目录文件显示百分比数字","date":"2022-06-10T06:53:51.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/da9429a1.html","link":"","permalink":"https://blog.xx996.top/article/da9429a1.html","excerpt":"","text":"1ctrl + ALT + F6","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"页面url的一些操作","slug":"js/页面url的一些操作","date":"2022-06-08T06:54:23.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/c509c10d.html","link":"","permalink":"https://blog.xx996.top/article/c509c10d.html","excerpt":"","text":"获取URL的参数1234567891011function getQueryVariable(variable)&#123; var query = window.location.search.substring(1); var vars = query.split(&quot;&amp;&quot;); for (var i=0;i&lt;vars.length;i++) &#123; var pair = vars[i].split(&quot;=&quot;); if(pair[0] == variable)&#123;return pair[1];&#125; &#125; return(false);&#125; 示例http://127.0.0.1/a.html?id=1&amp;name=a getQueryVariable(“id”) 返回1 getQueryVariable(“name”) 返回a getQueryVariable(“age”) 返回false","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://blog.xx996.top/tags/js/"}]},{"title":"RVM is not a function","slug":"rails/环境搭建","date":"2022-06-02T00:54:09.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/dcc8e7ab.html","link":"","permalink":"https://blog.xx996.top/article/dcc8e7ab.html","excerpt":"","text":"出现这个提示之后 12345RVM is not a function, selecting rubies with &#x27;rvm use ...&#x27; will not work.You need to change your terminal emulator preferences to allow login shell.Sometimes it is required to use `/bin/bash --login` as the command.Please visit https://rvm.io/integration/gnome-terminal/ for an example. 需要执行这个命令 123$ cp ~/.profile ~/.bash_login","categories":[],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"https://blog.xx996.top/tags/Ruby/"},{"name":"Ruby on Rails","slug":"Ruby-on-Rails","permalink":"https://blog.xx996.top/tags/Ruby-on-Rails/"}]},{"title":"发送ssh公钥到Linux服务器","slug":"os/发送ssh公钥到服务器","date":"2022-05-31T06:33:53.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/1c96518c.html","link":"","permalink":"https://blog.xx996.top/article/1c96518c.html","excerpt":"","text":"生成ssh公钥12$ ssh-keygen -t rsa 发送ssh公钥到Linux服务器12$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.1.1 链接Linux服务器12$ ssh root@192.168.1.1","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.xx996.top/tags/Linux/"},{"name":"SSH","slug":"SSH","permalink":"https://blog.xx996.top/tags/SSH/"}]},{"title":"Vue在Nginx部署后刷新页面404","slug":"nginx/vue部署后刷新页面404","date":"2022-05-26T07:32:32.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/2617dc89.html","link":"","permalink":"https://blog.xx996.top/article/2617dc89.html","excerpt":"","text":"配置改成如下即可 123456789 location / &#123; root /usr/share/nginx/html/cnode; index index.html; try_files $uri $uri/ @router;&#125; location @router &#123; rewrite ^.*$ /index.html last;&#125;","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"vue","slug":"vue","permalink":"https://blog.xx996.top/tags/vue/"}]},{"title":"在Linux中搜索最近修改的文件","slug":"os/在Linux中搜索最近修改的文件","date":"2022-05-25T03:00:21.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/40c667fc.html","link":"","permalink":"https://blog.xx996.top/article/40c667fc.html","excerpt":"","text":"指定时间内修改的文件在十分钟内修改的 搜索当前目录中 10 分钟内修改的所有文件 1$ find . -type f -mmin -10 一天之内修改的文件 搜索当前目录中一天内修改的所有文件 1$ find . -type f -mtime -1 指定时间之前修改的文件十分钟之前修改的文件 1$ find . -type f -mmin +10 1天之前修改的文件 1$ find . -type f -mtime +1","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"}]},{"title":"linux删除指定时间的文件","slug":"os/linux根据时间清理文件","date":"2022-05-11T02:56:04.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/9c9397cb.html","link":"","permalink":"https://blog.xx996.top/article/9c9397cb.html","excerpt":"","text":"删除超过30天的文件 可以使用find命令搜索修改时间早于30天的文件 1$ find /tmp -type f -mtime +30 验证一下搜索结果是否正确，避免误删文件。确认无误后，执行以下命令删除 1$ find /tmp -type f -mtime +30 -delete 删除指定类型文件除了删除所有文件之外，还可以添加更多筛选器来查找命令。例如，只需要删除扩展名为“.log”并在30天之前修改的文件。 为了安全起见，首先进行试运行并列出符合条件的文件。 1$ find /var/log -name &quot;*.log&quot; -type f -mtime +30 验证数据无误后，执行以下命令删除 1$ find /var/log -name &quot;*.log&quot; -type f -mtime +30 -delete 删除目录 以下命令将搜索 /var/log 目录下 90 天之前修改过的所有目录。 1$ find /var/log -type d -mtime +90 我们可以使用命令行选项执行 rm 命令。查找命令输出将作为输入发送到 rm 命令。-exec 1$ find /var/log -type d -mtime +30 -exec rm -rf &#123;&#125; \\; 在删除目录之前，请确保没有删除任何有用的目录。有时，父目录修改日期可能早于子目录。在这种情况下，递归删除也可以删除子目录。","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"}]},{"title":"vite简单使用","slug":"vite/vite简单使用","date":"2022-05-10T07:25:16.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/896d8037.html","link":"","permalink":"https://blog.xx996.top/article/896d8037.html","excerpt":"","text":"Vite是什么 Vite是一个开发服务器，它基于原生ES模块提供了丰富的内建功能，比如惊人的模块热更新 一套构建指令，它使用Rollup打包代码，并且是与配置的，可输出用于生产环境的高度优化过的静态资源 为什么使用Vite存在的问题在浏览器支持ES模块之前，Javascript并没有提供原生机制让开发者以模块化的方式进行开发。所以就出现了webpack和Parcel等打包工具，它们也极大的改善了前端开发者的开发体验。 但是随着项目越来越大，需要处理的代码也注解的增长。开发体验就不是那么友好了，通常需要几十秒甚至几分钟才可以启动开发服务器，即便使用热更新，也得等到几秒之后才能在页面显示出来，极大地影响开发者的心情和开发效率。 Vite的解决方案当冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。 Vite通过一开始讲应用中的模块区分为依赖和源码两类，改进了开发服务器启动时间。 依赖依赖大多为在开发时不会发生变动的纯Javascript。比如axios,一些较大的依赖处理起来也很高。 Vite会使用esbuild预构建依赖，这么做的目的有两个 CommonJS 和 UMD 兼容性 开发阶段中，Vite的开发服务器将所有代码视为原生ES模块。因此，Vite必须先将作为CommonJS 或 UMD 发布的依赖项转换为 ESM。 性能 Vite将有许多内部模块的ESM依赖关系转换为单个模块，以便后续页面加载性能， 一些包将他们的ES模块构建作为许多单独的文件相互导入。当执行import时，浏览器会同时发出多个HTTP请求。尽管服务器在处理这些请求时没有问题，但大量的请求会在浏览器端造成网络阻塞，导致页面的加载速度过慢。 通过预购建lodash-es成为一个模块，我们就只需要发出一个HTTP请求了。 缓存 文件系统缓存 Vite会将预购建的依赖缓存到node_modules/.vite, 它根据几个来源决定是否要重新运行与构建步骤 package.json中的dependencies 列表 包管理器的lockfile，例如package-lock.json,yarn.lock,pnpm-lock.yaml 可能在vite.config.js相关字段中配置过的。 只有在上述其中一项发生更改时，才需要重新允许预购建。 如果出于某些原因，需要强制`vite`重新构建依赖，可以使用`--force`命令行选项启动开发服务器，或者手动删除缓存目录 `node_modules/.vite` 浏览器缓存 解析后的依赖请求会以HTTP头max-age=31536000,immutable缓存。一旦被缓存，这些请求将永远不会在请求开发服务器。如果安装了不同版本，在附加不同的query使他们自动失效。","categories":[],"tags":[{"name":"vite","slug":"vite","permalink":"https://blog.xx996.top/tags/vite/"}]},{"title":"github文件夹显示箭头","slug":"git/github文件夹显示箭头","date":"2022-05-09T06:53:14.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/b49b1222.html","link":"","permalink":"https://blog.xx996.top/article/b49b1222.html","excerpt":"","text":"删除文件夹里的.git目录 执行 git rm --cached 文件夹名 git add .","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.xx996.top/tags/git/"}]},{"title":"rails window环境安装与入门","slug":"rails/入门","date":"2022-04-11T02:38:35.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/5d3de2d5.html","link":"","permalink":"https://blog.xx996.top/article/5d3de2d5.html","excerpt":"","text":"安装 下载Windows安装包，安装成功。 打开终端输入 12ruby -vruby 2.3.3p222 (2016-11-21 revision 56859) [i386-mingw32] 创建应用1$ rails new blog 创建之后进入目录安装依赖 123 $ cd blog$ bundle install 会出现ssl证书问题。 在终端中输入 需要科学上网 1$ gem update --system 完成之后重新安装依赖即可 启动1$ ruby bin/rails server 创建controller1$ ruby bin/rails generate controller Welcome index 添加路由 config/routes.rb 1resources :article 查看所有路由 1$ ruby bin/rails routes 创建模型 123$ ruby bin/rails generate model Article title:string text:text$ ruby bin/rails db:migrate # 同步模型 接收参数 1@article = Article.new(params.require(:article).permit(:title, :text)) 字段验证 1234class Article &lt; ApplicationRecord validates :title, presence: true, length: &#123; minimum: 5 &#125;end controller 增加前缀 1rails g controller &#x27;api/v1/users&#x27;","categories":[],"tags":[{"name":"rails","slug":"rails","permalink":"https://blog.xx996.top/tags/rails/"}]},{"title":"webstorm与vscode格式化","slug":"tool/webstorm与vscode格式化","date":"2021-11-26T01:15:04.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/a710b611.html","link":"","permalink":"https://blog.xx996.top/article/a710b611.html","excerpt":"","text":"到了新公司发现同事用的都是VSCode，而VSCode的格式化代码与WebStorm的不一致。 因为前后端都做，用惯了JetBrains全家桶，导致不太适应VSCode，最后所以打算调整一下代码的格式化，继续用webstorm开发。 自闭合的标签，闭合前补充空格 Settings &gt; Editor &gt; Code Style &gt; HTML &gt; Other(Tab页) &gt; 勾选 in empty tag 句尾冒号分割，永远使用单引号，多行保留最后一项的逗号 Settings &gt; Editor &gt; Code Style &gt; JavaScript &gt; Punctuation(Tab页) &gt; 123use semicolon to terminate statement alwaysuse single quotes alwaysTrailing comma Add when multiline 使用空格代替tab，tab展示为两个空格，代码缩进为两个空格 Settings &gt; Editor &gt; Code Style &gt; JavaScript &gt; Tabs and Indents(Tab页) &gt; 不勾选 Use Tab character 123Tab Size: 2Indent: 2Continuation indent: 2 对象花括号和中间键值填充空格(包括ES6 的import export) Settings &gt; Editor &gt; Code Style &gt; JavaScript &gt; Spaces(Tab页) &gt; Within &gt; 勾选Object literal braces 和 ES6 import/export braces————————————————版权声明：本文为CSDN博主「咕了个咕」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/Azhuzhu_chaste/article/details/106636056","categories":[],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://blog.xx996.top/tags/jenkins/"}]},{"title":"css优先级","slug":"css/css优先级","date":"2021-11-09T08:08:39.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/8954c4f1.html","link":"","permalink":"https://blog.xx996.top/article/8954c4f1.html","excerpt":"","text":"内联样式优先与Style标签123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; h1 &#123; color: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;color: blue;&quot;&gt;CSS测试&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 后声明的优先于先声明的123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;style与link&lt;/title&gt; &lt;style&gt; h1 &#123; color: red; &#125; &lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;CSS测试&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; style.css 1h1&#123;color: blue;&#125; Style标签优先于link标签 style标签在link标签后面的前提下,其实也是先后顺序的比较 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;style与link&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;style&gt; h1 &#123; color: red; &#125; &lt;/style&gt; &lt;h1&gt;CSS测试&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; style.css 1h1&#123;color: blue;&#125; id优先与class 即使class在id之后声明 123456789101112131415161718192021 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;class与id&lt;/title&gt; &lt;style&gt; #text &#123; color: red; &#125; .text &#123; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;text&quot; id=&quot;text&quot;&gt;CSS测试&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 选择器选择器越详细优先级越高 12345678910111213141516171819202122 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;选择器优先级&lt;/title&gt; &lt;style&gt; .parent h1 &#123; color: red; &#125; h1 &#123; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;parent&quot;&gt; &lt;h1 id=&quot;text&quot;&gt;CSS测试&lt;/h1&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"数据分享","slug":"share/分享数据","date":"2021-10-28T01:32:17.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/92a5aaba.html","link":"","permalink":"https://blog.xx996.top/article/92a5aaba.html","excerpt":"","text":"历史上的今天1234└─history └─10 ├─21 └─22 根目录为月份,子目录是每天的历史数据。 子目录中的index.json文件为当天发生的事情列表，其他为每个事件的详细信息,以e_id命名。 获取数据 日历123456├── calendar│ ├── 2021│ │ ├── 01│ │ │ ├── 01.json│ │ │ ├── 02.json 根目录为年,子目录是月份,以日期命名。 获取数据 全国行政区获取数据 驾照题库 数据准备中","categories":[],"tags":[{"name":"聚合数据","slug":"聚合数据","permalink":"https://blog.xx996.top/tags/%E8%81%9A%E5%90%88%E6%95%B0%E6%8D%AE/"}]},{"title":"js数组方法整理","slug":"js/array","date":"2021-09-29T07:16:06.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/5570a359.html","link":"","permalink":"https://blog.xx996.top/article/5570a359.html","excerpt":"","text":"创建数组12let array = [&#x27;a&#x27;, &#x27;b&#x27;] 访问数组1234let a=array[0]//a 遍历数组1234 array.forEach(function(item, index, array) &#123; console.log(item, index)&#125;) 添加元素到数组的末尾12array.push(&#x27;c&#x27;) 删除数组最后一个元素1array.pop(); 删除数组第一个元素1array.shift() 添加元素到数组的第一位1array.unshift(&#x27;1&#x27;) 获取数组的长度1let length=array.length; 获取某个元素在数组中的索引12let index=array.indexOf(&#x27;a&#x27;) 通过索引删除某个元素12array.splice(1, 1)","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"}]},{"title":"Selenium实战","slug":"java/selenium","date":"2021-09-29T03:48:06.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/d009cca4.html","link":"","permalink":"https://blog.xx996.top/article/d009cca4.html","excerpt":"","text":"安装依赖12345&lt;dependency&gt; &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt; &lt;artifactId&gt;selenium-java&lt;/artifactId&gt; &lt;version&gt;3.141.59&lt;/version&gt;&lt;/dependency&gt; 安装浏览器驱动下载安装 选择自己喜欢的浏览器，本文使用Edge 打开一个网页12345System.setProperty(&quot;webdriver.edge.driver&quot;, &quot;D:\\\\edgedriver_win32\\\\MicrosoftWebDriver.exe&quot;); //上面下载的浏览器驱动WebDriver driver = new EdgeDriver();driver.get(&quot;https://www.baidu.com/&quot;); 定位元素1234567driver.findElement(By.id(&quot;kw&quot;)).sendKeys(&quot;java&quot;); //输入内容driver.findElement(By.id(&quot;su&quot;)).click(); //点击按钮List&lt;WebElement&gt; muchoCheese = driver.findElements(By.cssSelector(&quot;#cheese li&quot;));//获取多个与元素 获取页面cookie123456Set&lt;Cookie&gt; cookies = driver.manage().getCookies(); String cookieStr = &quot;&quot;; for (Cookie cookie : cookies) &#123; cookieStr+= cookie.getValue(); &#125; 浏览器加载扩展12345678File plugPath = new File(&quot;E:\\\\tsy\\\\tsy-tool.crx&quot;); //创建options对象 ChromeOptions options = new ChromeOptions(); options.addExtensions(plugPath); WebDriver driver = new ChromeDriver(options); //这里使用的是chrome","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"}]},{"title":"Promise知识整理","slug":"js/Promise","date":"2021-09-26T06:07:31.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/ce0623bf.html","link":"","permalink":"https://blog.xx996.top/article/ce0623bf.html","excerpt":"","text":"Promise 的含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。 Promise的特点 对象的状态不受外界影响 Promise对象代表一个异步操作，有三种状态，pending、fulfilled、rejected，只有异步操作的结果可以决定当前是哪一种状态，其他任何操作都无法改变这个状态。 一旦状态改变，就不会在变，任何时候都可以得到这个结果。Promise对象的状态改变只有两种可能,从pending变为fulfilled,从pending变为rejected。只要这两种情况发生，状态就凝固了，不会在改变，会一直保持这个结果，这时就成为resolved。如果改变已经发生了，你在对Promise对象添加回调函数，也会立即得到这个结果。 也有一些缺点 无法取消Promise,一旦创建对象就会立即执行,无法中途取消。 如果不设置回调函数,Promise内部抛出的错误,不会反应到外部。 当处于pending状态时,无法得到当前进展到哪一阶段 参考阮一峰老师的ECMAScript 6 入门 语法12345678910 const promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;); Promise构造函数接受一个函数做为参数,该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript 引擎提供 resolve函数的作用是,将Promise对象的状态从pending 改为fulfilled,并且将异步结果传递出去。 reject函数的作用是,将Promise对象的状态从pending改为rejected,并将异步异常传递出去 then 方法Promise对象创建完成后,可以用then方法分别指定resolve和rejected状态的回调函数 123456789101112131415161718192021222324252627282930function ajaxGet(url) &#123; return new Promise((resolve, reject) =&gt; &#123; if (url !== &quot;api&quot;) &#123; reject(url + &quot;请求失败&quot;); &#125; setTimeout(function () &#123; resolve(url + &quot;请求完成&quot;); &#125;, 1000); &#125;);&#125;ajaxGet(&quot;api&quot;).then( (data) =&gt; &#123; console.log(data); &#125;, (error) =&gt; &#123; console.error(error); &#125;);ajaxGet(&quot;api11&quot;).then( (data) =&gt; &#123; console.log(data); &#125;, (error) =&gt; &#123; console.error(error); &#125;); 运行代码 上面的代码中使用Promise对象模拟了一个从后台服务取数据的过程,ajaxGet方法只有一个简单的逻辑判断,如果传如的参数是api那么会在一秒之后返回成功，否则，立即返回失败。 上面代码的返回结果是 12//&quot;api11请求失败&quot; //&quot;api请求完成&quot; Promise对象创建后会立即执行，所以先输出第二个方法的返回值，此时第一个还在等待状态变成完成 catch 方法Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。 如果异步操作发生了异常,状态变成了rejected,就会调用catch方法指定的函数，处理这个异常。如果then方法指定的回调函数中发生了异常，也会被catch方法捕获 123456789 ajaxGet(&quot;api11&quot;).then( (data) =&gt; &#123; console.log(data); &#125;).catch(error=&gt;&#123; console.error(error) &#125;); 运行代码 1234567891011ajaxGet(&quot;api&quot;).then( (data) =&gt; &#123; console.log(data); throw &#x27;error!&#x27;; &#125;).catch(error=&gt;&#123; console.error(error) //then方法中的异常也会捕捉到 &#125;); 运行代码 finally 方法finally方法是不管Promise对象最后状态如何，都会执行的操作。和try catch中的finally方法是一样的 下面是一个例子，最后使用finally方法输出一段内容 12345678910111213141516171819202122232425262728 ajaxGet(&quot;api&quot;).then( (data) =&gt; &#123; console.log(data); &#125;, (error) =&gt; &#123; console.error(error); &#125;).finally(()=&gt;&#123; console.log(&#x27;不管成不成功，我都会输出&#x27;)&#125;);ajaxGet(&quot;api11&quot;).then( (data) =&gt; &#123; console.log(data); &#125;, (error) =&gt; &#123; console.error(error); &#125;).finally(()=&gt;&#123; console.log(&#x27;不管成不成功，我都会输出&#x27;)&#125;);//&quot;api11请求失败&quot;//&quot;不管成不成功，我都会输出&quot;//&quot;api请求完成&quot;//&quot;不管成不成功，我都会输出&quot; 运行代码 finally的回调函数是没有参数的，无法得知Promise对象的结果是什么,这也表明不管最后的返回结果是什么，它都会执行","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"}]},{"title":"webapi常用方法","slug":"js/webapi","date":"2021-09-26T03:09:59.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/db7e49b1.html","link":"","permalink":"https://blog.xx996.top/article/db7e49b1.html","excerpt":"","text":"Web Api 的概念 浏览器提供了一些操作浏览器功能与页面元素的API,本次整理了一些常用操作页面元素的Api document.querySelector()该方法会返回文档中与指定选择器或选择器组匹配的第一个页面元素。如果找不到匹配项，则返回null 语法1let element = document.querySelector(selectors); 参数 selectors 该字符串必须是有效的CSS选择器字符串 返回值 文档中与指定的一组CSS选择器匹配的第一个页面元素。如果没有匹配到，则返回null。 实例实例1 123456789101112131415161718 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;first&quot;&gt; &lt;span class=&quot;text&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;4&lt;/span&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 以这个页面为基础,比如我想获取第一个class是text的内容,写法如下 12let element=document.querySelector(&#x27;.text&#x27;).textContent;console.log(element); //1 运行代码 按照预期，输出的内容是1,是我想要的结果 页面中有多个class为test的元素，但是精准的返回了我们要想的1，是因为该方法只会匹配页面中查到的第一个元素 实例2还用上面的页面为例，如果我想获取到页面中第二个class为text的元素该怎么写呢。 123let element=document.querySelector(&#x27;span.text:nth-child(2)&#x27;).textContent;console.log(element); //2 运行代码 该方法支持复杂选择器 实例3页面元素中id应该是唯一的,但是在实际开发中很有可能会出现一个页面中有多个相同id的元素,那这个时候使用这个方法会得到什么呢。 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;span id=&quot;first&quot;&gt;1&lt;/span&gt; &lt;span id=&quot;first&quot;&gt;2&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; 页面中有两个id为first的元素,我们执行该方法看一下效果 12let element=document.querySelector(&#x27;#first&#x27;).textContent;console.log(element); //1 返回结果是1 运行代码 就算页面中有多个id重复的元素，也是返回第一个元素 document.querySelectorAll() 返回与指定的选择器组匹配的文档中的元素列表。 语法 1let elementList = document.querySelectorAll(selectors); 参数 selectors 这个字符串必须是一个合法的 CSS选择器字符串 如果selectors参数中包含 CSS伪元素，则返回的列表始终为空。 返回值一个静态 NodeList，包含一个与至少一个指定选择器匹配的元素的Element对象，或者在没有匹配的情况下为空NodeList 实例123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;first&quot;&gt; &lt;span class=&quot;text&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;text&quot;&gt;4&lt;/span&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 123 let elementList = document.querySelectorAll(&#x27;.text&#x27;);console.log(elementList) // [object NodeList] (4) document.images返回当前文档中所有 image 元素的集合. 语法1let imageCollection = document.images; 返回值HTMLImageElement集合，当前页面的所有图片元素 实例123456let ilist = document.images;for(var i = 0; i &lt; ilist.length; i++) &#123; if(ilist[i].src == &quot;logo.png&quot;) &#123; &#125;&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"}]},{"title":"Proxy基础用法","slug":"js/Proxy的使用","date":"2021-09-17T08:44:13.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/365c4e09.html","link":"","permalink":"https://blog.xx996.top/article/365c4e09.html","excerpt":"","text":"Proxy 意思为代理，即在访问对象之前建立一道拦截，任何访问该对象的操作之前都会通过这道拦截。 Proxy可以拦截什么 getPrototypeOf() setPrototypeOf() isExtensible() preventExtensions() getOwnPropertyDescriptor() defineProperty() has() get() set() deleteProperty() ownKeys() apply() construct() 实例Proxy 语法1let proxy = new Proxy(target, handler); 这就是Proxy的使用方法，所有的用法都是上面的方法，不同的是handler里面拦截的设置 new Proxy()表示生成一个Proxy实例 target表示要拦截的目标对象 handler是一个对象，用来定制拦截方法 想要handler里的拦截方法生效，后续所有操作必须使用Proxy的实例 getget方法在日常开发中应该是使用最多的方法了,先看一下在不使用Proxy时候的场景 12345let user = &#123; name: &quot;张三&quot;,&#125;;console.log(user.name); //张三console.log(user.age); //undefined 运行代码 上面代码中，使用let定义了一个对象，并且有一个name属性 然后分别打印出name和age属性,结果很明显，age属性未定义会输出undefined 但是在实际项目中我们是不希望返回undefined这种值给页面的，下面我们就看一下怎么使用Proxy解决这个问题 1234567891011121314151617181920212223let handler = &#123; //定义了get方法的拦截器 get: function (target, key) &#123; //target:要拦截的对象 //key: 修改的属性 if(target.hasOwnProperty(key))&#123; if(key==&#x27;name&#x27;)&#123; return &quot;法外狂徒-张三&quot; &#125; &#125; return &quot;18&quot; &#125;&#125;;let obj = &#123; name: &quot;张三&quot;&#125;;let user = new Proxy(obj, handler);//注意，这里的user不是上个示例的user对象了,而是Proxy的实例console.log(user.name); //法外狂徒-张三console.log(user.age); //18 运行代码 使用了Proxy之后,发现和之前什么都不一样了，这是因为我们设置了get方法的拦截，当获取name属性的时候，我们返回一个固定的值，否则就返回年龄18。 这里是不太严谨的，实际项目中不可能只有两个字段的，这里只是为了演示 想要handler里的拦截方法生效，后续所有操作必须使用Proxy的实例 这个时候可以验证一下这句话，我们不使用Proxy实例,看看会怎么样 运行代码 set在实际项目中，我们会经常进行修改某个对象的属性，有时候在一些特殊的场景下需要对对象修改的新属性进行判断，看是否符合当前的业务场景。 1234567891011121314151617let user = new Proxy( &#123; age: 18 &#125;, &#123; set: function (target, key, value) &#123; if (value &gt; 140) &#123; throw &quot;你要成仙了!&quot;; &#125; target[key]=value &#125; &#125;);user.age = 20;console.log(user.age)//20user.age=200//Uncaught 你要成仙了! 运行代码 当我们修改一个人的年龄大于140,就会触发异常 construct construct方法用于拦截new操作符,为了使new操作符在生成的Proxy对象上生效,用于初始化代理的目标对象自身必须具有Construct内部方法 示例 12345678let proxy = new Proxy(1, &#123; construct(target, args) &#123; console.log(target); return new target(...args); &#125;&#125;);//Uncaught TypeError: Cannot create proxy with a non-object as target or handler 运行代码 12345678910 let proxy = new Proxy(function () &#123;&#125;, &#123; construct(target, args) &#123; console.log(args); return 1; &#125;&#125;);let obj = new proxy();//Uncaught TypeError: &#x27;construct&#x27; on proxy: trap returned non-object (&#x27;1&#x27;) 运行代码 上面是两个错误的示例，下面写一个正确的写法 12345678var p = new Proxy(function() &#123;&#125;, &#123; construct: function(target, argumentsList, newTarget) &#123; console.log(&#x27;called: &#x27; + argumentsList.join(&#x27;, &#x27;)); return &#123; value: argumentsList[0] * 10 &#125;; &#125;&#125;);console.log(new p(1).value); // &quot;called: 1&quot; // 10 运行代码 通过以上代码得出结论 要代理的对象必须具有Construct方法 必须返回一个对象 其他其他方法下一章继续","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"}]},{"title":"10+个应该知道的Github仓库","slug":"share/10+个应该知道的Github仓库","date":"2021-09-16T08:57:54.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/5a8a6c8d.html","link":"","permalink":"https://blog.xx996.top/article/5a8a6c8d.html","excerpt":"","text":"点击标题可进入 Web Developer RoadMap 30 Seconds of Code Awesome Cheatsheets Web Development Resources CSS Protips Awesome Design Pattern Coding Interview University Awesome Interview Questions Free Programming Book Command Line Awesome FreeCodeCamp Frontend Development Tech Interview Handbook","categories":[],"tags":[{"name":"github","slug":"github","permalink":"https://blog.xx996.top/tags/github/"}]},{"title":"html知识点","slug":"html/分享几个html知识点","date":"2021-09-14T01:36:21.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/46c033c6.html","link":"","permalink":"https://blog.xx996.top/article/46c033c6.html","excerpt":"","text":"Img 标签在不同设备上显示不同的图片12345&lt;picture&gt; &lt;source media=&quot;(min-width:768px)&quot; srcset=&quot;med_flag.jpg&quot; /&gt; &lt;source media=&quot;(min-width:495px)&quot; srcset=&quot;small_flower.jpg&quot; /&gt; &lt;img src=&quot;high_flag.jpg&quot; alt=&quot;Flags&quot; style=&quot;width:auto;&quot; /&gt;&lt;/picture&gt; 快速搜索匹配项12345678910&lt;label for=&quot;country&quot;&gt;Choose your country from the list:&lt;/label&gt;&lt;input list=&quot;countries&quot; name=&quot;country&quot; id=&quot;country&quot; /&gt;&lt;datalist id=&quot;countries&quot;&gt; &lt;option value=&quot;UK&quot;&gt;&lt;/option&gt; &lt;option value=&quot;Germany&quot;&gt;&lt;/option&gt; &lt;option value=&quot;USA&quot;&gt;&lt;/option&gt; &lt;option value=&quot;Japan&quot;&gt;&lt;/option&gt; &lt;option value=&quot;India&quot;&gt;&lt;/option&gt;&lt;/datalist&gt; Html 标签变量12345678&lt;head&gt; &lt;base href=&quot;https://www.twitter.com/&quot; target=&quot;_blank&quot; /&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;elonmusk&quot; alt=&quot;Elon Musk&quot; /&gt; &lt;a href=&quot;BillGates&quot;&gt;Bill Gate&lt;/a&gt;&lt;/body&gt; img标签的完整地址是https://www.twitter.com/elonmusk a标签同样 图片懒加载1&lt;img src=&quot;image.png&quot; loading=&quot;lazy&quot; alt=&quot;…&quot; width=&quot;200&quot; height=&quot;200&quot; /&gt; 使用 CSS 固定 header 与 footer12345&lt;div id=&quot;container&quot;&gt; &lt;header&gt;header&lt;/header&gt; &lt;footer&gt;footer&lt;/footer&gt;&lt;/div&gt; 12345678header &#123; position: sticky; top: 0;&#125;footer &#123; position: sticky; bottom: 0;&#125; 使用 Promise 实现任务进度123456789101112131415161718192021const loadingBar = document.getElementById(&quot;loadingBar&quot;);async function task() &#123; return new Promise((res) =&gt; &#123; setTimeout(res, Math.random() * 5000); &#125;);&#125;function loadingBarStatus(current, max) &#123; loadingBar.textContent = `Loading $&#123;current&#125; of $&#123;max&#125;`;&#125;(async () =&gt; &#123; let current = 1; const promises = new Array(100) .fill(0) .map(() =&gt; task().then(() =&gt; loadingBarStatus(current++, 100))); await Promise.all(promises); loadingBar.textContent = `Loading Finished`;&#125;)();","categories":[{"name":"html","slug":"html","permalink":"https://blog.xx996.top/categories/html/"}],"tags":[{"name":"html","slug":"html","permalink":"https://blog.xx996.top/tags/html/"}]},{"title":"使用PhantomJS在服务端生成图片","slug":"node/使用PhantomJS在服务端生成图片","date":"2021-09-12T05:23:22.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/32db227c.html","link":"","permalink":"https://blog.xx996.top/article/32db227c.html","excerpt":"","text":"概述 有一个这样的需求，就是把页面上的Echart图表转换成图片保存到word中。 环境准备 安装PhantomJS 1npm install phantomjs -g 使用下面的命令，查看是否安装成功 1phantomjs --version 实现webpage webpage模块是PhantomJS的核心模块，用于网页操作。 12var webPage = require(&#x27;webpage&#x27;);var page = webPage.create(); open()open方法用于打开具体的网页。 12345var page = require(&#x27;webpage&#x27;).create();page.open(&#x27;http://127.0.0.1:8080/index.html&#x27;, function (status) &#123; page.render(&#x27;google_home.png&#x27;, &#123; format: &#x27;png&#x27; &#125;); phantom.exit();&#125;); 测试 执行 1phantomjs index.js 参数1234var webPage = require(&#x27;webpage&#x27;);var page = webPage.create();var system = require(&#x27;system&#x27;);var list = (system.args + &quot;&quot;).split(&#x27;,&#x27;); Demo","categories":[],"tags":[{"name":"node","slug":"node","permalink":"https://blog.xx996.top/tags/node/"}]},{"title":"中国行政区域数据","slug":"tool/中国行政区域数据","date":"2021-09-12T05:03:28.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/6a1814b.html","link":"","permalink":"https://blog.xx996.top/article/6a1814b.html","excerpt":"","text":"简介行政区域json文件， 包括省，市，区，县，镇，街道 数据持续更新中。。。 保存目录123456data│ ├─1 │ ├─2│ ├─3│ └─4│ └─5 1 省 2 市 3 区/县 4 镇/街道 5 邮政编码/电话区号 根据层级结构保存在不同的文件夹中，文件的命名都是上级区域的id。 比如北京的id是110000,那么海淀区所在的文件名称就是110000.json 以此类推 启动项目 下载代码到本机(二选一即可) 123$ git clone https://github.com/lizeze/china_region.git$ git clone https://gitee.com/zeze.li/china_region.git 安装依赖 123$ cd china_region$ npm i $ npm start Get http://localhost:9600/v1/api/xzhf/fid=100000&amp;level=1 level 请求的数据类型，和保存目录一致 fid 请求数据的父节点 生成sql文件123456789101112$ npm run sql #全部数据生成sql$ npm run sql 1 #生成省级sql$ npm run sql 2 #生成市级sql$ npm run sql 3 #生成县级sql$ npm run sql 4 #生成街道sql$ npm run postcode # 生成邮政编码数据sql 修改sql字段名称 ./src/tool.js 1234567 let sqlObj = &#123; tableName: &#x27;table1&#x27;, id: &#x27;id&#x27;, name: &#x27;name&#x27;, level: &#x27;level&#x27;, parent: &#x27;parent&#x27;,&#125;; 修改postCode表名称./src/tool.js 1234let postCodeSqlObj = &#123; tableName: &#x27;postCode&#x27;&#125;; 其他语言 java","categories":[],"tags":[]},{"title":"jenkins启动jar","slug":"tool/jenkins启动jar","date":"2021-09-12T04:59:53.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/8c429c4.html","link":"","permalink":"https://blog.xx996.top/article/8c429c4.html","excerpt":"","text":"123456789101112#!/bin/bashcd $&#123;WORKSPACE&#125;echo &quot;Stopping sso&quot;port=8990pid=$(netstat -nlp | grep :$port | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;);if [ -n &quot;$pid&quot; ]then echo &quot;kill -9 pid:&quot; $pid kill -9 $pidfiecho &quot;Execute shell Finish&quot;BUILD_ID=dontKillMe java -jar target/demo-0.0.1.jar &amp;","categories":[],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://blog.xx996.top/tags/jenkins/"}]},{"title":"java设置使用代理","slug":"java/java设置使用代理","date":"2021-09-12T04:56:06.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/dc9ca875.html","link":"","permalink":"https://blog.xx996.top/article/dc9ca875.html","excerpt":"","text":"123System.setProperty(&quot;proxySet&quot;, &quot;true&quot;);System.setProperty(&quot;socksProxyHost&quot;, &quot;10.194.69.85&quot;);System.setProperty(&quot;socksProxyPort&quot;, &quot;10086&quot;);","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"}]},{"title":"linux设置开机启动","slug":"os/linux设置开机启动","date":"2021-09-12T04:54:48.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/b9f29ac6.html","link":"","permalink":"https://blog.xx996.top/article/b9f29ac6.html","excerpt":"","text":"创建一个脚本12345$ vim auto_run_script.sh#!/bin/bashdate &gt;&gt; /tmp/output.txthostname &gt;&gt; /tmp/output.txt 保存退出后，再给它赋予可执行权限1$ chmod 777 auto_run_script.sh 创建启动服务 1234567891011121314$ cd /etc/systemd/system$ vim auto_run_script.service[Unit]Description=Run a Custom Script at StartupAfter=default.target[Service]ExecStart=/auto_run_script.sh[Install]WantedBy=default.target 保存退出 启动服务12$ systemctl daemon-reload$ systemctl enable auto_run_script.service","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"}]},{"title":"docker启动mysql容器之后报错","slug":"docker/docker启动mysql容器之后报错","date":"2021-09-12T04:51:13.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/51442d59.html","link":"","permalink":"https://blog.xx996.top/article/51442d59.html","excerpt":"","text":"123456ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你的密码&#x27;;grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;; ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;flush privileges; 1234567CREATE USER &#x27;lzz&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;grant all privileges on *.* to &#x27;lzz&#x27;@&#x27;%&#x27; with grant option;set global time_zone = &#x27;+8:00&#x27;; mysql数据库时间少一天 1characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai 把serverTimezone值修改为Asia/Shanghai","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.xx996.top/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.xx996.top/tags/docker/"},{"name":"mysql","slug":"mysql","permalink":"https://blog.xx996.top/tags/mysql/"}]},{"title":"跨域解决方案","slug":"nginx/跨域解决方案","date":"2021-09-12T04:48:17.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/3a48177d.html","link":"","permalink":"https://blog.xx996.top/article/3a48177d.html","excerpt":"","text":"跨域什么是跨域协议 + 域名 + 端口 有一处不相同时，就认为是跨域 为什么会有跨域同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到攻击。 解决方案使用Nginx做反向代理 情景1 假设网站部署在80接口，在80接口下设置反向代理，可直接解决跨域问题 12345location ^~/v1&#123; rewrite ^/v1/(.*)$ /$1 break; proxy_pass http://localhost:8080;&#125; 情景2 假设网站部署在8081端口，api端口为8080，反向代理服务端口为80 12345678910111213location ^~/v1&#123; rewrite ^/v1/(.*)$ /$1 break; proxy_pass http://localhost:8080; add_header Access-Control-Allow-Methods *; add_header Access-Control-Max-Age 3600; add_header Access-Control-Allow-Credentials true; add_header Access-Control-Allow-Origin $http_origin; add_header Access-Control-Allow-Headers $http_access_control_request_headers; if ($request_method = OPTIONS)&#123; return 200; &#125; &#125;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://blog.xx996.top/categories/Nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"}]},{"title":"使用js下载文件","slug":"js/使用js下载文件","date":"2021-09-12T04:46:20.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/39437d16.html","link":"","permalink":"https://blog.xx996.top/article/39437d16.html","excerpt":"","text":"1234567891011121314151617181920var url = &#x27;download/?filename=aaa.txt&#x27;; var xhr = new XMLHttpRequest(); xhr.open(&#x27;GET&#x27;, url, true); xhr.responseType = &quot;blob&quot;; xhr.onload = function () &#123; if (this.status === 200) &#123; var blob = this.response; var reader = new FileReader(); reader.readAsDataURL(blob); reader.onload = function (e) &#123; var a = document.createElement(&#x27;a&#x27;); a.download = &#x27;name&#x27;; a.href = e.target.result; $(&quot;body&quot;).append(a); a.click(); $(a).remove(); &#125; &#125; &#125;; xhr.send()","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/categories/JavaScript/"}],"tags":[{"name":"js","slug":"js","permalink":"https://blog.xx996.top/tags/js/"}]},{"title":"linux防火墙基本操作","slug":"os/linux防火墙基本操作","date":"2021-09-12T04:33:55.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/307bc4b4.html","link":"","permalink":"https://blog.xx996.top/article/307bc4b4.html","excerpt":"","text":"启动防火墙1systemctl start firewalld 禁用防火墙1systemctl stop firewalld 设置开机启动1systemctl enable firewalld 停止并禁用开机启动1sytemctl disable firewalld 重启防火墙 1firewall-cmd --reload 查看状态1systemctl status firewalld或者 firewall-cmd --state 查看版本1firewall-cmd --version 查看开放的端口12firewall-cmd --list-port 开放端口1234firewall-cmd --zone=public --add-port=80/tcp --permanent#不加 --permanent重启之后就会失效，加了是永久生效# 增加规则之后要重启防火墙firewall-cmd --reload","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"}]},{"title":"git仓库同时上传到github和gitee","slug":"git/git仓库同时上传到github和gitee","date":"2021-09-12T04:30:43.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/f51db730.html","link":"","permalink":"https://blog.xx996.top/article/f51db730.html","excerpt":"","text":"下载仓库到本地 1git clone git@github.com:xx.git 移除现有仓库 1git remote rm origin 关联GitHub的远程库 1git remote add github git@github.com:xx.git 关联码云仓库 1git remote add gitee git@xx.git 查看远程仓库 1git remote -v 代码推送 123git push github mastergit push gitee master","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.xx996.top/tags/git/"}]},{"title":"api自动增加前缀","slug":"java/api自动增加前缀","date":"2021-09-10T13:45:52.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/2494396d.html","link":"","permalink":"https://blog.xx996.top/article/2494396d.html","excerpt":"","text":"AutoPrefixUrlMapping.java 123456789101112131415161718192021public class AutoPrefixUrlMapping extends RequestMappingHandlerMapping &#123; @Value(&quot;$&#123;api-package&#125;&quot;) private String apiPackagePath; @Override protected RequestMappingInfo getMappingForMethod(Method method, Class&lt;?&gt; handlerType) &#123; RequestMappingInfo mappingInfo = super.getMappingForMethod(method, handlerType); if(mappingInfo != null)&#123; String prefix = this.getPrefix(handlerType); return RequestMappingInfo.paths(prefix).build().combine(mappingInfo); &#125; return mappingInfo; &#125; private String getPrefix(Class&lt;?&gt; handlerType)&#123; String packageName = handlerType.getPackage().getName(); String dotPath = packageName.replaceAll(this.apiPackagePath,&quot;&quot;); return dotPath.replace(&quot;.&quot;, &quot;/&quot;); &#125;&#125; AutoPrefixConfiguration.java 123456789@Configurationpublic class AutoPrefixConfiguration implements WebMvcRegistrations &#123; @Override public RequestMappingHandlerMapping getRequestMappingHandlerMapping() &#123; return new AutoPrefixUrlMapping(); &#125;&#125; application.yml 1api-package: com.example.demo DemoController 123456789@RestController@RequestMapping(&quot;/demo&quot;)public class DemoController &#123; @GetMapping(&quot;/a&quot;) public ResponseEntity getUser() &#123; return ResponseEntity.status(HttpStatus.OK).body(&quot;22&quot;); &#125; 目录结构 请求地址:http://localhost:8080/api/demo/a","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://blog.xx996.top/tags/springboot/"}]},{"title":"分享几个css生成工具","slug":"css/分享几个css生成工具","date":"2021-09-10T13:36:22.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/dba10516.html","link":"","permalink":"https://blog.xx996.top/article/dba10516.html","excerpt":"","text":"Neumorphism/Soft UI generator Smooth Shadow generator Fancy Border Radius Generator Easing Gradients Data Viz Color Palette Generator CSS Grid Generator CSS Accordion Slider Generator CSS clip-path maker Get Waves","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"css","slug":"css","permalink":"https://blog.xx996.top/tags/css/"}]},{"title":"Nginx配合后台服务控制文件的下载与预览","slug":"nginx/Nginx配合后台服务控制文件的下载与预览","date":"2021-09-10T13:35:10.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/71eca8f7.html","link":"","permalink":"https://blog.xx996.top/article/71eca8f7.html","excerpt":"","text":"背景最近接到一个项目，有这样一个需求，需要对部分文件的下载与预览增加权限控制，只允许会员用户使用，找了一些资料之后最后决定使用Nginx配合Java服务来实现这个功能。 只针对一些业务文件采用此方式，网页中的静态文件尽量不要使用这种方法，以免增加服务器的负担 配置Nginx 配置中使用Nginx开启了一个端口为8086的文件服务器,配置中增加了internal属性，表示文件只允许内部访问。在接收到请求后代理转发给了端口为8080的Java权限认证服务。 这些基本上就是Nginx的全部配置了，不是很复杂，配置完成之后记得重启，确保生效。 Java服务 后台使用SpringBoot搭建服务，在认证通过之后通过设置ResponseHeader通知Nginx是否返回请求的文件。 Content-Type Content-Disposition X-Accel-Redirect 三个主要的header 更多的header介绍 完整代码","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"}]},{"title":"使用typescript与webpack搭建开发环境(四)","slug":"ts/使用typescript与webpack搭建开发环境(四)","date":"2021-09-10T13:33:15.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/61f06ba6.html","link":"","permalink":"https://blog.xx996.top/article/61f06ba6.html","excerpt":"","text":"如何区分开发环境与生成环境 上一章讲了开发环境`devtool`的使用，但是官方推荐不同的环境使用不同的配置，那么怎么来区分当前运行的是什么环境呢，这次讲一下这个。 安装依赖1$ yarn add -D webpack-merge 调整目录结构增加config文件夹，将webpack.config.js文件移动到里面，保留基础配置，删除mode和devtool属性 在config文件夹中增加webpack.conf.dev.js，写入以下内容 1234567const merge = require(&#x27;webpack-merge&#x27;);const common = require(&#x27;./webpack.config.js&#x27;);let devConfig = &#123; mode: &quot;development&quot;, devtool: &#x27;source-map&#x27;,&#125;;module.exports = merge.merge(common, devConfig); 修改package.json 123&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;webpack serve --config config/webpack.conf.dev.js&quot; &#125;, 执行 yarn start 最后不同的环境创建不同的webpack.conf.xxx.js即可 注意修改webconfig.conf.js中的文件引用路径，因为它的位置改变了 获取代码","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://blog.xx996.top/categories/TypeScript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"},{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"}]},{"title":"使用typescript与webpack搭建开发环境(二)","slug":"ts/使用typescript与webpack搭建开发环境(二)","date":"2021-09-10T13:17:28.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/e540a482.html","link":"","permalink":"https://blog.xx996.top/article/e540a482.html","excerpt":"","text":"静态资源的引入 上一章中已经搭建好开发环境，下面开始逐渐丰富项目的内容，本章是静态资源的引入。 安装依赖webpack默认是只认识JavaScript的，只知道该怎么处理它，如果项目中出现了其他类型的文件，并且也希望webpack对它进行打包的时候，就要安装对应的loader了。 loader是什么，下面内容源自webpack中文网站 loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！ css-loader 1$ yarn add css-loader style-loader -D 在src文件夹中创建第一个css文件，命名为index.css 123 .hello&#123; color:red;&#125; 修改index.ts文件 修改webpack.config.js 12345678module: &#123; rules: [ + &#123; + test: /\\.css$/, + use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] + &#125; ], &#125; file-loader file-loader用于引入图片文件 1$ yarn add file-loader -D 修改index.ts文件，并在src文件夹内增加一张png图片 1234import img from &quot;./index.png&quot;let image: HTMLImageElement = document.createElement(&quot;img&quot;);image.src = img;document.body.append(image); 修改webpack.config.js 12345678module: &#123; rules: [ +&#123; + test: /\\.(png|jpe?g|gif)$/i, + use:[&#x27;file-loader&#x27;], +&#125;, ], &#125;, 最后关于css和image的配置就是这些了，现在运行启动命令就可以看到网页上的字已经是红色了，并且添加了一张图片 更多loader 获取代码","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://blog.xx996.top/categories/TypeScript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"},{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"}]},{"title":"使用typescript与webpack搭建开发环境(一)","slug":"ts/使用typescript与webpack搭建开发环境(一)","date":"2021-09-10T13:16:29.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/4a713fe0.html","link":"","permalink":"https://blog.xx996.top/article/4a713fe0.html","excerpt":"","text":"使用typescript与webpack搭建开发环境 项目初始化1$ yarn init -y 本文全部使用yarn命令，没有安装的可以执行下面使用npm安装 1$ npm i -g yarn 安装依赖 将上面内容拷贝到项目中的package.json文件中，执行安装命令 1$ yarn install 项目配置初始化tsconfig.json1$ tsc --init 如果出现tsc不是正常的命令错误提示 可在命令前面添加npx 然后在执行执行成功之后修改tsconfig,写入以下内容 更多配置选项可参考官方文档 webpack.config.js在项目根目录下增加webpack.config.js,内容如下 更多配置选项可参考官方文档到这里项目的配置项基本已经全部完成了，下面开始写代码 增加第一个ts文件在项目目录增加src文件夹，并创建第一个文件index.ts,内容如下 完成之后运行一下项目，验证一下 项目启动项目启动有两种方式，一种是直接在终端中输入webpack serve来启动或者使用yarn命令启动，我们使用第二种方式。首先配置yarn的启动脚本 在package.json中增加以下代码 123&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;webpack serve&quot;&#125; 下面我们就可以在终端中直接输入yarn start来启动项目了，执行之后会看到以下提示 项目顺利启动，并在本地启动了一个端口为8080的服务,我们可以直接在浏览器中那个访问 http://localhost:8080/ 获取源码点击这里","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://blog.xx996.top/categories/TypeScript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"},{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"}]},{"title":"使用第三方授权登录自己的网站","slug":"tool/使用第三方授权登录自己的网站","date":"2021-09-10T13:12:57.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/e44222ec.html","link":"","permalink":"https://blog.xx996.top/article/e44222ec.html","excerpt":"","text":"Github注册应用如果想要使用Github为应用授权的话，要先去自己的账户上注册一个应用，点击注册。 名称随便输入，写上自己网站的主页，最后一个是授权成功之后回调的页面。 创建成功之后会看到这个 跳转到Github授权页面 点一下Generate a new client secret会生成一个秘钥，只会出现一次，要保存好它，不要泄露出去。后面会用到的。 下面开始写代码了，只是做一个简单的示例，没有特别复杂的。就是文档顶部的四种类型。图片是在iconfont找到，这个不做过多描述了。 1234function github() &#123; location.href = `https://github.com/login/oauth/authorize?client_id=39b050937104c9618fee&amp;redirect_uri=http://localhost/me.html`; &#125; 当点击Github图标之后会调用这个方法，跳转到授权页面，上面那个用到两个参数 client_id就是上面应用的client_id，千万不要把secret放在前端，不能暴露出来的 redirect_uri 授权成功返回的页面，上面也提到过的。 调用方法之后会跳转到这个页面，输入账号密码登录就可以了。密码验证成功之后会跳转到http://localhost/me.html?code=ffwgregregregre,记住这个code，后面会用到的。 获取到授权码在授权页面授权成功之后，会得到一个授权码，就是上面的code，拿到这个去后台服务获取用户信息。 要获取到用户信息首页要使用授权码得到一个令牌，使用这个令牌向Github请求用户信息。 后台实现1234567891011121314151617181920212223242526272829 @GetMapping(&quot;github/&#123;code&#125;&quot;)public ResponseEntity getUserInfo(@PathVariable String code) &#123; String clientId = &quot;&quot;; String secret = &quot;&quot;; Proxy proxy = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(&quot;127.0.0.1&quot;, 1090)); //获取访问令牌 String body = HttpRequest.post( String.format(&quot;https://github.com/login/oauth/access_token?client_id=%s&amp;client_secret=%s&amp;code=%s&quot;, clientId, secret, code) ).header(&quot;accept&quot;, &quot;application/json&quot;). setProxy(proxy). execute(). body(); GithubTokenResponse githubTokenResponse = JSON.parseObject(body, GithubTokenResponse.class); //使用令牌获取用户信息 String userInfo = HttpRequest.get(&quot;https://api.github.com/user&quot;). setProxy(proxy). header(&quot;accept&quot;, &quot;application/json&quot;). header(&quot;Authorization&quot;, &quot;token &quot; + githubTokenResponse.getAccess_token()) .execute().body(); return ResponseEntity.ok(userInfo);&#125; GithubTokenResponse 12345678public class GithubTokenResponse &#123; private String access_token; private String scope; private String token_type; &#125; 前端页面 1234&lt;body&gt; &lt;img id=&quot;avatar&quot; style=&quot;display: none&quot; /&gt; &lt;h1 id=&quot;name&quot;&gt;&lt;/h1&gt; &lt;/body&gt; 12345678let code = getQueryVariable(&quot;code&quot;); ajaxGet(&quot;github/&quot; + code, function (data) &#123; let user = data; avatar.style.display = &quot;block&quot;; avatar.src = user.avatar_url; document.getElementById(&quot;name&quot;).innerHTML = user.name; &#125;); GiteeGitee和Github基本是一样的，也是要先注册一个应用，地址在这里，不过多描述了，直接上代码。 后端实现12345678910111213@GetMapping(&quot;gitee/&#123;code&#125;&quot;)public ResponseEntity getGiteeUser(@PathVariable String code) &#123; String clientId = &quot;&quot;; String secret = &quot;&quot;; String redirect_uri = &quot;http://localhost/gitee.html&quot;; String url = String.format(&quot; https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=%s&amp;client_id=%s&amp;redirect_uri=%s&amp;client_secret=%s&quot;, code, clientId, redirect_uri, secret); String body = HttpRequest.post(url).execute().body(); GithubTokenResponse githubTokenResponse = JSON.parseObject(body, GithubTokenResponse.class); String userInfo = HttpRequest.get(&quot;https://gitee.com/api/v5/user?access_token=&quot; + githubTokenResponse.getAccess_token()).execute().body(); return ResponseEntity.ok(userInfo);&#125; 前端实现 与Github一致 EmailEmail实现的思路大致就是，输入邮箱之后，后台会向邮箱发送一个链接，通过这个链接激活账户。 发送邮件12345&lt;body&gt; &lt;input id=&quot;email&quot; type=&quot;text&quot; placeholder=&quot;邮箱地址&quot; /&gt; &lt;button onclick=&quot;register()&quot;&gt;注册&lt;/button&gt;&lt;/body&gt; 12345678910&lt;script&gt; function register() &#123; let value = email.value; if (value) &#123; ajaxPost(&quot;email/create&quot;, &#123; email: value &#125;, function (data) &#123; console.log(data); &#125;); &#125; &#125; &lt;/script&gt; 123456789101112131415@PostMapping(&quot;/email/create&quot;)public ResponseEntity createEmailUrl(@RequestBody Map&lt;String, String&gt; map) throws UnsupportedEncodingException, MessagingException &#123; String token = JwtToken.makeToken(map.get(&quot;email&quot;), &quot;abc&quot;, 60 * 30); //注意，QQ邮箱或者163邮箱使用的不是登录密码，要去账户里生成授权码 SendEmail sendEmail = new SendEmail(&quot;123@qq.com&quot;, &quot;password&quot;, &quot;smtp.qq.com&quot;); sendEmail.setSubject(&quot;邮箱注册&quot;); String emailContent = String.format(&quot;&lt;a href=&#x27;%sauthemail.html?code=%s&#x27;&gt;点击注册&lt;/a&gt;,30分钟内有效&quot;, pageUrl, token); sendEmail.addContent(emailContent); sendEmail.addReceive(new ReceiveAccount(map.get(&quot;email&quot;), &quot;xx996用户&quot;, Message.RecipientType.TO)); sendEmail.setPersonal(&quot;xx996管理员&quot;); sendEmail.saveChange(); sendEmail.sendEmail(); return ResponseEntity.ok(token);&#125; 验证邮件后端 123456789101112131415@GetMapping(&quot;/email/&#123;code&#125;&quot;) public ResponseEntity emailInfo(@PathVariable String code) &#123; Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); if (!JwtToken.verifyToken(code, &quot;abc&quot;)) &#123; ResponseEntity.ok().body((map.put(&quot;mess&quot;, &quot;身份认证失败&quot;))); &#125; String emial = JwtToken.getClaims(code, &quot;abc&quot;).get().get(&quot;uid&quot;).asString(); map.put(&quot;mess&quot;, emial); return ResponseEntity.ok().body(map); &#125; 前端12345&lt;body&gt; &lt;h1&gt; &lt;span id=&quot;h1&quot;&gt;&lt;/span&gt; &lt;/h1&gt;&lt;/body&gt; 1234let code = getQueryVariable(&quot;code&quot;); ajaxGet(&quot;email/&quot; + code, function (data) &#123; $(&quot;#h1&quot;).text(data.mess); &#125;); 微信登录这里微信登录是使用小程序实现的，个人是无法申请微信登录的。 微信扫一扫登录(使用小程序实现) 最后项目中使用到的工具 1234567891011121314151617181920&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.78&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-http&lt;/artifactId&gt; &lt;version&gt;5.7.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;cn.xx996&lt;/groupId&gt; &lt;artifactId&gt;springboot-tool&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;cn.xx996&lt;/groupId&gt; &lt;artifactId&gt;email&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt;","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"wechat","slug":"wechat","permalink":"https://blog.xx996.top/tags/wechat/"},{"name":"github","slug":"github","permalink":"https://blog.xx996.top/tags/github/"},{"name":"gitee","slug":"gitee","permalink":"https://blog.xx996.top/tags/gitee/"},{"name":"email","slug":"email","permalink":"https://blog.xx996.top/tags/email/"}]},{"title":"发布jar包到maven中央仓库（2021最新）","slug":"java/发布jar包到maven中央仓库（2021最新)","date":"2021-09-10T13:11:00.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/7d888e25.html","link":"","permalink":"https://blog.xx996.top/article/7d888e25.html","excerpt":"","text":"配置环境安装java环境 12链接：https://pan.baidu.com/s/1o-wFA-m33JQs-sQJ-DgRaQ 提取码：ux7j 下载到服务器之后解压到指定位置 1234$ mkdir /usr/java$ tar xzf jdk-8u301-linux-x64.tar.gz -C /usr/java$ vim /etc/profile 写入下面的内容 123export JAVA_HOME=/usr/java/jdk1.8.0_301export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/libexport PATH=$JAVA_HOME/bin:$PATH 保存退出执行source /etc/profile使配置文件生效。 验证是否安装成功 1234$ java -version java version &quot;1.8.0_301&quot; Java(TM) SE Runtime Environment (build 1.8.0_301-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode) 看到这个就表示安装成功了。 安装maven12345$ mkdir /usr/mvn$ cd /usr/mvn$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz$ tar -zxvf apache-maven-3.8.1-bin.tar.gz$ vim /etc/profile 写入下面内容 1234export MAVEN_HOME=/usr/mvn/apache-maven-3.8.1export PATH=$PATH:$MAVEN_HOME/bin 保存退出执行source /etc/profile使配置文件生效。 验证是否安装成功 12345$ mvn -versionMaven home: /usr/mvn/apache-maven-3.8.1Java version: 1.8.0_301, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_301/jreDefault locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;4.18.0-240.10.1.el8_3.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot; 其他工具1$ yum install git gpg -y 如果已经安装可以跳过这步 注册sonatype账号 点击 注册一个新的账户。 登录之后新建一个issues 按要求填写就可以了，主要说一个Group Id 如果你的代码时托管在Github上的，那么写Group Id的时候就不能写 com.github.xxx了,我使用io开头，详情在这里 创建完成之后会跳转到这个连接https://issues.sonatype.org/browse/OSSRH-xxxx,当看到这个连接之后，你要在你的Github上创建一个仓库，来证明你是这个Github的主人，仓库的名字就是连接里的OSSRH-xxxx。 创建后的仓库连接为https://github.com/yourgithubname/OSSRH-xxxx,然后在帖子下面留言告诉管理员这个仓库你已经创建好了名字为OSSRH-xxxx的仓库,这样可以省去他让你证明你是这个账户的拥有者，提高效率。等到管理员回复之后就可以上传jar包了。 下面是管理员的回复，看到这个就表示完成了。 123456789101112131415161718192021io.github.xxx has been prepared, now user(s) youname can:Publish snapshot and release artifacts to s01.oss.sonatype.orgHave a look at this section of our official guide for deployment instructions:https://central.sonatype.org/publish/publish-guide/#deploymentDepending on your build configuration, your first component(s) might be released automatically after a successful deployment.If that happens, you will see a comment on this ticket confirming that your artifact has synced to Maven Central.If you do not see this comment within an hour or two, you can follow the steps in this section of our guide:https://central.sonatype.org/publish/release/######As part of our efforts to improve the security and quality posture of the open source supply chain,we plan to enable additional scanning of dependencies for security alerts soon. Since you&#x27;re alreadyhosting your source code in Github, you can get these insights today by enabling Sonatype Lift.Sonatype Lift is free forever on public repositories! Lift tells you about open source vulnerabilitiesduring code review, and goes beyond open source to scan your code for both code quality and security issues,providing feedback right in your pull requests.More information can be found at https://links.sonatype.com/products/lift/github-integration###### 发布前的准备修改pom文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;groupId&gt;io.github.xxxx&lt;/groupId&gt;&lt;artifactId&gt;xxxx&lt;/artifactId&gt;&lt;version&gt;1.0.0&lt;/version&gt;&lt;name&gt;xxx&lt;/name&gt;&lt;url&gt;xxxx&lt;/url&gt;&lt;description&gt;xxxxx&lt;/description&gt;&lt;distributionManagement&gt; &lt;snapshotRepository&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;url&gt;https://s01.oss.sonatype.org/content/repositories/snapshots&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;repository&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;url&gt;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt; &lt;/repository&gt;&lt;/distributionManagement&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- Source --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.2.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;jar-no-fork&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- Javadoc --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt; &lt;version&gt;2.9.1&lt;/version&gt; &lt;configuration&gt; &lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;jar&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- GPG mvn clean deploy -P release -Dgpg.passphrase=YourPassphase --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt; &lt;version&gt;1.5&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;sign-artifacts&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;sign&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;&lt;licenses&gt; &lt;license&gt; &lt;name&gt;MIT License&lt;/name&gt; &lt;url&gt;https://github.com/xxx/xxx/xxxxxx/master/LICENSE&lt;/url&gt; &lt;distribution&gt;repo,manual&lt;/distribution&gt; &lt;/license&gt;&lt;/licenses&gt;&lt;developers&gt; &lt;developer&gt; &lt;name&gt;xxx&lt;/name&gt; &lt;email&gt;xxxx&lt;/email&gt; &lt;url&gt;xxxx&lt;/url&gt; &lt;/developer&gt;&lt;/developers&gt;&lt;scm&gt; &lt;connection&gt;scm:git:https://github.com/xxx/xxxx.git&lt;/connection&gt; &lt;developerConnection&gt;scm:git:https://github.com/xxxx/xxxx.git&lt;/developerConnection&gt; &lt;url&gt;https://github.com/xxxx/xxxxx&lt;/url&gt; &lt;tag&gt;0.0.1&lt;/tag&gt;&lt;/scm&gt; 只需修改和自己相关的内容即可，文中用xxxx表示，其他的不需要修改 Group Id一定要和申请的保持一致 上传gpg key 12$ gpg generate-key# 按照提示输入用户名和邮箱，最后会输入一个密码，记住这个密码下面会用 将公钥发送到PGP密钥服务器 1$ gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 6107DF0A8EE6A62EABFDD12914F722543E7D2C1E 返回结果 1gpg: 将密钥‘14F722543E7D2C1E’上传到 hkp://keyserver.ubuntu.com:11371 验证是否上传成功 1$ gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 6107DF0A8EE6A62EABFDD12914F722543E7D2C1E 返回结果 123gpg: 密钥 14F722543E7D2C1E：“houbb &lt;XXX@XX.com&gt;”未改变gpg: 合计被处理的数量：1gpg: 未改变：1 setting.xml12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd&quot;&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;username&gt;sonatype账号&lt;/username&gt; &lt;password&gt;sonatype密码&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;gpg.executable&gt;gpg2&lt;/gpg.executable&gt; &lt;gpg.passphrase&gt;gpg公钥的密码&lt;/gpg.passphrase&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/settings&gt; 注意判断mvn使用的setting.xml是哪里的，一般在mvn主目录下的conf文件夹和用户目录下的.m2文件夹 上传程序在项目根目录下执行 1$ mvn clean deploy 稍等片刻会出现一个窗口，输入gpg的密码 看到这个表示已经上传成功了。 上传成功之后登录到https://s01.oss.sonatype.org/,账号就是一开始注册的sonatype账号。 登录之后会点击Staging Repositories会看到这个页面，选中记录点击close,成功之后点击Release。 到这步就已经大功告成了,稍等片刻就可以在这里看到上传的包了 比如 Group Id是io.github.xxx artifactId是tool version是1.0.0, 查看地址就是https://repo.maven.apache.org/maven2/io/github/xxx/tool/1.0.0 如果上面这个连接可以查到，就已经可以在项目中使用了。同步到中央仓库的时间不太确定。 发布成功之后去帖子上回复一下，告诉管理员发布成功了。 遇到的问题 执行mvn deploy的时候总是返回401 错误，找了各种办法都不能解决，重新注册了个账户就可以了，不知道是为什么。 repository地址已经改变了，现在网上大部分的文章都是旧的，新的是这样的 12345678910&lt;distributionManagement&gt; &lt;snapshotRepository&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;url&gt;https://s01.oss.sonatype.org/content/repositories/snapshots&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;repository&gt; &lt;id&gt;ossrh&lt;/id&gt; &lt;url&gt;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt; &lt;/repository&gt;&lt;/distributionManagement&gt; 官方文档有最新的配置信息，遇到问题之后还是要先查官方文档 在centos发布时报错Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign 解决方法","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://blog.xx996.top/tags/maven/"},{"name":"gpg","slug":"gpg","permalink":"https://blog.xx996.top/tags/gpg/"}]},{"title":"免费获取JetBrains一年全家桶","slug":"tool/免费获取JetBrains一年全家桶","date":"2021-09-10T13:09:23.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/4c17429a.html","link":"","permalink":"https://blog.xx996.top/article/4c17429a.html","excerpt":"","text":"登录Github Education 点击Get benefits 点击Get student benefits 下一步以后上传自己的学生证件和个人信息等待审核完成。 时间多久不太确定，我大概等了一个月，审核通过之后会收到一封邮件 收到成功之后的邮件之后 到这里 关联上申请时候的github就可以了，关联之后登陆JetBrains账户就可得到授权了 如果没有学生身份的话，还是建议大家购买正版，拒绝盗版软件，购买正版请点击这里","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"JetBrains","slug":"JetBrains","permalink":"https://blog.xx996.top/tags/JetBrains/"}]},{"title":"git配置ssh","slug":"git/git配置ssh","date":"2021-09-10T13:02:39.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/c8c56574.html","link":"","permalink":"https://blog.xx996.top/article/c8c56574.html","excerpt":"","text":"在github上新增ssh1234$ rm -rf ~/.ssh/* $ ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot; # 按回车三次$ cat ~/.ssh/id_rsa.pub 基础信息配置$ git config --global user.name 你的英文名 $ git config --global user.email 你的邮箱 $ git config --global push.default matching $ git config --global core.quotepath false $ git config --global core.editor &quot;vim&quot;","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.xx996.top/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.xx996.top/tags/ssh/"}]},{"title":"搭建maven私有仓库.","slug":"java/搭建maven私有仓库","date":"2021-09-10T13:00:39.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/c3ac5d8c.html","link":"","permalink":"https://blog.xx996.top/article/c3ac5d8c.html","excerpt":"","text":"下载安装包点击 从官网选择自己适合自己操作系统的安装包，下载完成之后放到一个合适的位置，无需要安装。 启动 进入nexus-3.30.0-01\\bin目录下，输入cmd 在命令行中输入nexus /run，稍等片刻 提示8081端口已经被占用，原来nexus默认使用的端口是8081,关闭正在使用的8081端口之后，在此运行命令稍等片刻启动成功。 登陆系统启动成功之在浏览器打开http://localhost:8081/， 初始化完成之后点击Sign in登陆，默认账户是admin,初始密码在nexus-3.30.0-01-win64\\sonatype-work\\nexus3目录下的admin.password文件中，复制到登陆表单中完成登陆，成功之后会提示重新设置密码，设置一个自己常用的密码即可。 增加阿里代理仓库 输入两个必选项 aliyun http://maven.aliyun.com/nexus/content/groups/public/ 保存完成 选择Configuration &gt; Repository, 然后双击 maven-public 把aliyun移动到右侧 保存。 配置Maven找到maven中的setting.xml,在servers标签中 写入下面的配置 123456789101112&lt;server&gt; &lt;id&gt;releases&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;123456&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;123456&lt;/password&gt; &lt;/server&gt; password是自己设置的登陆密码 在pom文件中加入下面的配置1234567&lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;releases&lt;/id&gt; &lt;name&gt;User Project Release&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/repository/maven-releases&lt;/url&gt; &lt;/repository&gt; &lt;/distributionManagement&gt; 发布代码到私有仓库 双击即可 查看发布的项目 使用仓库中的项目在pom文件中加入下面的配置 12345678910111213&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;url&gt;http://127.0.0.1:8081/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; 在发布和下载的时候如果遇到权限问题","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://blog.xx996.top/tags/maven/"},{"name":"nexus","slug":"nexus","permalink":"https://blog.xx996.top/tags/nexus/"}]},{"title":"Springboot使用@value注入静态属性","slug":"java/Springboot使用@value注入静态属性","date":"2021-09-10T12:44:39.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/daa7cd7.html","link":"","permalink":"https://blog.xx996.top/article/daa7cd7.html","excerpt":"","text":"Springboot @value 注解注入静态属性123456789101112@Componentpublic class FileTool &#123; private static String proxyIp; @Value(&quot;$&#123;cim.http.proxy_ip&#125;&quot;) public void setProxyIp(String _proxyIp) &#123; proxyIp = _proxyIp; &#125;&#125; 直接在属性上使用 @value 是无效的，要通过 set 方法注入， class 要加上 @Component 注解","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://blog.xx996.top/tags/springboot/"}]},{"title":"MyBatis-Plus通用查询工具类","slug":"java/MyBatis-Plus通用查询工具类.md","date":"2021-09-10T12:39:04.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/939c1baf.html","link":"","permalink":"https://blog.xx996.top/article/939c1baf.html","excerpt":"","text":"mybatis-plus简称MP是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 这是官方给的定义，关于mybatis-plus的更多介绍及特性，可以参考mybatis-plus官网 。那么它是怎么增强的呢？其实就是它已经封装好了一些crud方法，我们不需要再写xml了，直接调用这些方法就行，就类似于JPA。 下面是在MP为基础封装了一个查询类，实现了如果需要增加查询条件只需在前端修改即可。 查询工具 SearchModel123456789101112131415161718192021222324252627282930313233343536373839public class SearchModel&lt;T&gt; &#123; private Integer pageIndex; private Integer pageSize; private List&lt;Field&gt; fields; private String orderField; private boolean isAsc; public IPage&lt;T&gt; getPage() &#123; IPage&lt;T&gt; page = new Page&lt;&gt;(pageIndex, pageSize); if (!StringUtil.isEmptyOrNull(orderField)) &#123; OrderItem orderItem = new OrderItem(); orderItem.setAsc(isAsc); orderItem.setColumn(orderField); page.orders().add(orderItem); &#125; return page; &#125; public QueryWrapper&lt;T&gt; getQueryModel() &#123; QueryWrapper&lt;T&gt; queryWrapper = new QueryWrapper&lt;&gt;(); for (Iterator iter = this.fields.iterator(); iter.hasNext(); ) &#123; Field field = (Field) iter.next(); switch (field.getQueryMethod()) &#123; case eq: queryWrapper.eq(true, field.getName(), field.getValue()); break; case like: queryWrapper.like(true, field.getName(), field.getValue()); &#125; &#125; if (!StringUtil.isEmptyOrNull(orderField)) &#123; queryWrapper.orderBy(true, isAsc, orderField); &#125; return queryWrapper; &#125;&#125; Field1234567891011121314151617public class Field &#123; public Field(String name, Object value) &#123; this.name = name; this.value = value; this.queryMethod = QueryMethod.eq; &#125; public Field(String name, Object value, QueryMethod queryMethod) &#123; this.name = name; this.value = value; this.queryMethod = queryMethod; &#125; private String name; private Object value; private QueryMethod queryMethod;&#125; QueryMethod1234public enum QueryMethod &#123; eq, like&#125; 调用示例 1234567891011121314151617181920212223&#123;&quot;fields&quot;: [ &#123; &quot;value&quot;: &quot;v&quot;, &quot;name&quot;: &quot;project_code&quot;, &quot;queryMethod&quot;: &quot;eq&quot; &#125;, &#123; &quot;name&quot;: &quot;type&quot;, &quot;queryMethod&quot;: &quot;like&quot;, &quot;value&quot;: &quot;b&quot; &#125;, &#123; &quot;name&quot;: &quot;id&quot;, &quot;queryMethod&quot;: &quot;like&quot;, &quot;value&quot;: &quot;a&quot; &#125;],&quot;pageIndex&quot;: 1,&quot;pageSize&quot;: 8,&quot;orderField&quot;: &quot;type&quot;,&quot;isAsc&quot;: &quot;false&quot;&#125; 在api中传入上面的json对象即可完成一个查询服务,查询条件通过前端传入的字段控制 BaseService IBaseService 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public interface IBaseService&lt;T&gt; &#123; T save(T entity) throws Exception; boolean saveBatch(Collection&lt;T&gt; entityList); // TableId 注解存在更新记录，否插入一条记录 boolean saveOrUpdate(T entity); // 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法 boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper); // 批量修改插入 boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList); // 根据 entity 条件，删除记录 boolean remove(Wrapper&lt;T&gt; queryWrapper); // 根据 ID 删除 boolean removeById(Serializable id); // 根据 columnMap 条件，删除记录 boolean removeByMap(Map&lt;String, Object&gt; columnMap); // 删除（根据ID 批量删除） boolean removeByIds(Collection&lt;? extends Serializable&gt; idList); List&lt;T&gt; list(); // 查询列表 List&lt;T&gt; list(SearchModel&lt;T&gt; searchModel); // 查询（根据ID 批量查询） Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList); // 查询（根据 columnMap 条件） Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap); // 翻页查询 IPage&lt;T&gt; page(SearchModel&lt;T&gt; searchModel); T selectById(Serializable id); T selectOne(Wrapper&lt;T&gt; queryWrapper);&#125; BaseServiceImpl 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105public class BaseServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt; implements IBaseService&lt;T&gt; &#123; @Autowired private M baseMapper; @Override public T save(T entity) throws Exception &#123; baseMapper.insert(entity); return entity; &#125; @Transactional(rollbackFor = RuntimeException.class) @Override public boolean saveBatch(Collection&lt;T&gt; entityList) &#123; Integer size = entityList.size(); for (T entity : entityList) &#123; baseMapper.insert(entity); size++; &#125; return size == entityList.size(); &#125; @Override public boolean saveOrUpdate(T entity) &#123; int rs = baseMapper.updateById(entity); if (rs &gt; 0) return true; return baseMapper.insert(entity) &gt; 0; &#125; @Override public boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper) &#123; return false; &#125; @Transactional(rollbackFor = RuntimeException.class) @Override public boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList) &#123; for (T entity : entityList) &#123; saveOrUpdate(entity); &#125; return true; &#125; @Override public boolean remove(Wrapper&lt;T&gt; queryWrapper) &#123; return baseMapper.delete(queryWrapper) &gt; 0; &#125; @Override public boolean removeById(Serializable id) &#123; return baseMapper.deleteById(id) &gt; 0; &#125; @Override public boolean removeByMap(Map&lt;String, Object&gt; columnMap) &#123; return baseMapper.deleteByMap(columnMap) &gt; 0; &#125; @Override public boolean removeByIds(Collection&lt;? extends Serializable&gt; idList) &#123; return baseMapper.deleteBatchIds(idList) &gt; 0; &#125; @Override public List&lt;T&gt; list() &#123; return baseMapper.selectList(new QueryWrapper&lt;T&gt;()); &#125; @Override public List&lt;T&gt; list(SearchModel&lt;T&gt; searchModel) &#123; return baseMapper.selectList(searchModel.getQueryModel()); &#125; @Override public Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList) &#123; return baseMapper.selectBatchIds(idList); &#125; @Override public Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap) &#123; return baseMapper.selectByMap(columnMap); &#125; @Override public IPage&lt;T&gt; page(SearchModel&lt;T&gt; searchModel) &#123; return baseMapper.selectPage(searchModel.getPage(), searchModel.getQueryModel()); &#125; @Override public T selectById(Serializable id) &#123; return baseMapper.selectById(id); &#125; @Override public T selectOne(Wrapper&lt;T&gt; queryWrapper) &#123; return baseMapper.selectOne(queryWrapper); &#125;&#125; MP实现了mapper层基础的CRUD方法，这里把一些常用的service层的方法整理了一下，又减少了一些代码量 代码地址 使用示例","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://blog.xx996.top/tags/mybatis-plus/"}]},{"title":"Java全局异常捕获处理","slug":"java/Java全局异常捕获处理","date":"2021-09-10T12:37:39.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/1d5bf6e8.html","link":"","permalink":"https://blog.xx996.top/article/1d5bf6e8.html","excerpt":"","text":"为了项目的正常运行中,异常捕获,记录也是非常重要的，方便我们排查问题，定位问题 定义异常为了方便定位异常，自定义了几种异常类，方便我们快速定位异常。 基类12345public class HttpException extends RuntimeException &#123; protected String code; protected Integer httpStatusCode = 500;&#125; ParameterException123456public class ParameterException extends HttpException &#123; public ParameterException(String code)&#123; this.code = code; this.httpStatusCode = 400; &#125;&#125; ServerErrorException1234567public class ServerErrorException extends HttpException &#123; public ServerErrorException(String code) &#123; this.code = code; this.httpStatusCode = 500; &#125;&#125; UnAuthenticatedException1234567public class UnAuthenticatedException extends HttpException&#123; public UnAuthenticatedException(String code)&#123; this.code = code; this.httpStatusCode = 401; &#125;&#125; ForbiddenException123456public class ForbiddenException extends HttpException &#123; public ForbiddenException(String code) &#123; this.code = code; this.httpStatusCode = 403; &#125;&#125; NotFoundException1234567public class NotFoundException extends HttpException &#123; public NotFoundException(String code)&#123; this.httpStatusCode = 404; this.code = code; &#125;&#125; 这里定义了我在项目中常用的几种异常，也可根据实际情况定义自己所需的异常。 捕获异常 捕获异常需要用到一个注解@ControllerAdvice,关于它的详细解释可查看文档。 使用方法如下，定义一个异常捕获类 1234@ControllerAdvicepublic class GlobalExceptionAdvice &#123;&#125; 这个类就已经实现了捕获全局异常的功能，下面在加上上面定义的几种异常 12345678910111213141516171819202122232425262728293031@ControllerAdvicepublic class GlobalExceptionAdvice &#123; @ExceptionHandler(UnAuthenticatedException.class) public ResponseEntity unAuthenticatedException(UnAuthenticatedException e) &#123; return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getCode()); &#125; @ExceptionHandler(ParameterException.class) public ResponseEntity handleParameterException(ParameterException e) &#123; return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getCode()); &#125; @ExceptionHandler(ForbiddenException.class) public ResponseEntity handleForbiddenException(ForbiddenException e) &#123; return ResponseEntity.status(HttpStatus.FORBIDDEN).body(e.getCode()); &#125; @ExceptionHandler(NotFoundException.class) public ResponseEntity handleNotFoundException(NotFoundException e) &#123; return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getCode()); &#125; @ExceptionHandler(RuntimeException.class) public ResponseEntity handleRunTimeException(RuntimeException e) &#123; return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(500); &#125;&#125; @ExceptionHandler注解表示该方法捕获的异常类型，就可以在不同的异常中进行不同的处理方式。 记录异常 捕获到异常之后我们要记录下来，方便我们对bug的追踪解决。 记录方法有多种多样的，比如记录到数据库或者log文件中。我使用了第二种方式。 加入依赖 12345678910111213141516171819202122232425&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-jcl&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; 增加日志配置文件 logback.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt; &lt;!-- 控制台 appender, 几乎是默认的配置 --&gt; &lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;encoder charset=&quot;UTF-8&quot;&gt; &lt;!-- 输出的日志文本格式, 其他的 appender 与之相同 --&gt; &lt;pattern&gt; %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- info 级别的 appender --&gt; &lt;appender name=&quot;info&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 日志写入的文件名, 可以是相对目录, 也可以是绝对目录, 如果上级目录不存在会自动创建 --&gt; &lt;file&gt;./logs/info/log-stack.log&lt;/file&gt; &lt;!-- 如果是 true, 日志被追加到文件结尾; 如果是 false, 清空现存文件. 默认是true --&gt; &lt;append&gt;true&lt;/append&gt; &lt;!-- 日志级别过滤器, 只打 INFO 级别的日志--&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;INFO&lt;/level&gt; &lt;!-- 下面2个属性表示: 匹配 level 的接受打印, 不匹配的拒绝打印 --&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;!-- 最常用的滚动策略, 它根据时间来制定滚动策略, 既负责滚动也负责触发滚动 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!-- 设置滚动文件规则, 如果直接使用 %d, 默认格式是 yyyy-MM-dd --&gt; &lt;fileNamePattern&gt;./logs/info/log-stack.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;!-- 保留14天的日志 --&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 定义日志输出格式 --&gt; &lt;encoder charset=&quot;UTF-8&quot;&gt; &lt;pattern&gt; %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- error 级别的 appender --&gt; &lt;appender name=&quot;error&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;./logs/error/log-stack.log&lt;/file&gt; &lt;append&gt;true&lt;/append&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;./logs/error/log-stack.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;!-- 保留7天的日志 --&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 定义日志输出格式 --&gt; &lt;encoder charset=&quot;UTF-8&quot;&gt; &lt;pattern&gt; %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- error 级别的 appender --&gt; &lt;appender name=&quot;debug&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;./logs/debug/log-stack.log&lt;/file&gt; &lt;append&gt;true&lt;/append&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;DEBUG&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;./logs/debug/log-stack.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;!-- 保留7天的日志 --&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 定义日志输出格式 --&gt; &lt;encoder charset=&quot;UTF-8&quot;&gt; &lt;pattern&gt; %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; %L - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 指定 com.github 下的日志打印级别, appender --&gt; &lt;logger name=&quot;com.github&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt; &lt;appender-ref ref=&quot;stdout&quot;/&gt; &lt;appender-ref ref=&quot;info&quot;/&gt; &lt;appender-ref ref=&quot;error&quot;/&gt; &lt;appender-ref ref=&quot;debug&quot;/&gt; &lt;/logger&gt; &lt;root level=&quot;info&quot;&gt; &lt;appender-ref ref=&quot;stdout&quot;/&gt; &lt;appender-ref ref=&quot;info&quot;/&gt; &lt;appender-ref ref=&quot;error&quot;/&gt; &lt;/root&gt;&lt;/configuration&gt; 写入日志123456789@ControllerAdvice@Slf4jpublic class GlobalExceptionAdvice &#123; @ExceptionHandler(ParameterException.class) public ResponseEntity handleParameterException(ParameterException e) &#123; log.error(e.getLocalizedMessage()); return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getCode()); &#125;&#125; 完善异常信息文章中的异常只定义了code，具体的异常信息可以写在配置文件中或者保存在数据库中，在捕获到异常之后，找到对应的描述信息返回调用者，增加友好度。 完善记录日志 以上如果发生了异常，在日志文件中是这样记录的 110:19:32.024 [http-nio-8080-exec-2] ERROR c.g.e.d.advice.GlobalExceptionAdvice 41 - / by zero 发现记录的行号是在GlobalExceptionAdvice类中，并非是代码真实的位置。 如果要记录到代码的真实位置可以这样实现 123456789101112public String getExceptionDetail(Exception e) &#123; StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(e.getClass() + System.getProperty(&quot;line.separator&quot;)); stringBuilder.append(e.getLocalizedMessage() + System.getProperty(&quot;line.separator&quot;)); StackTraceElement[] arr = e.getStackTrace(); for (int i = 0; i &lt; arr.length; i++) &#123; stringBuilder.append(arr[i].toString() + System.getProperty(&quot;line.separator&quot;)); &#125; return stringBuilder.toString(); &#125; 1log.error(getExceptionDetail(e)); 根据实际情况选择适合自己的方式 完整代码Github Gitee","categories":[{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"异常","slug":"异常","permalink":"https://blog.xx996.top/tags/%E5%BC%82%E5%B8%B8/"}]},{"title":"使用babel把es6转成es5","slug":"js/使用babel把es6转成es5","date":"2021-09-10T12:35:09.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/9da0838d.html","link":"","permalink":"https://blog.xx996.top/article/9da0838d.html","excerpt":"","text":"Babel 是什么Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。 Babel能用在哪里NodeJs使用 npm 初始化项目script12$ mkdir es6-to-es5$ npm init -y 安装Babel script1$ npm install --save-dev @babel/core @babel/cli 安装完成之后, 你的 package.json 会加入这些代码 1234&quot;devDependencies&quot;: &#123; + &quot;@babel/cli&quot;: &quot;^7.12.8&quot;, + &quot;@babel/core&quot;: &quot;^7.12.9&quot;&#125; 现在把 Babel 的运行命令放入到 npm 脚本中, 也是在 package.json 中 1234 &quot;scripts&quot;: &#123;+ &quot;build&quot;: &quot;babel src -d lib&quot; &#125; 创建.babelrc配置文件script12$ npm install @babel/preset-env --save-dev 创建babel.config.json文件,写入以下内容 123&#123; &quot;presets&quot;: [&quot;@babel/preset-env&quot;]&#125; 环境都配置完成, 下面开始正式写代码了 写一段ES6代码 创建 /src/index.js script123$ mkdir src$ touch src/index.js 写入一个简单的箭头函数 123456let sayHello = () =&gt; &#123; console.log(&#x27;hello xiaotaideng&#x27;)&#125;sayHello() 现在运行刚刚写好的启动脚本 script12$ npm run build 完成之后可以看到目录中新增了一个build文件夹,打开里面的index.js它的内容是这样的 1234567&quot;use strict&quot;;var sayHello = function sayHello() &#123; console.log(&#x27;hello xiaotaideng&#x27;);&#125;;sayHello(); 现在执行下面的命令 1$ node build/index.js 可以正常的输出，到现在好像已经可以正常的使用了 点击获取源码","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"},{"name":"es6","slug":"es6","permalink":"https://blog.xx996.top/tags/es6/"},{"name":"es5","slug":"es5","permalink":"https://blog.xx996.top/tags/es5/"},{"name":"babel","slug":"babel","permalink":"https://blog.xx996.top/tags/babel/"},{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"}]},{"title":"nvm安装node","slug":"node/nvm安装node","date":"2021-09-10T12:32:36.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/6875ed76.html","link":"","permalink":"https://blog.xx996.top/article/6875ed76.html","excerpt":"","text":"安装使用nvm安装 1$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash 提示内容：=&gt; Downloading nvm as script to ‘/home/dhbm/.nvm’=&gt; Appending nvm source string to /home/dhbm/.bashrc=&gt; Appending bash_completion source string to /home/dhbm/.bashrc=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:export NVM_DIR=”$HOME/.nvm”[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvm[ -s “$NVM_DIR/bash_completion” ] &amp;&amp; . “$NVM_DIR/bash_completion” # This loads nvm bash_completion 按照提示，直接 copy 粘贴以上内容 123export NVM_DIR=&quot;$HOME/.nvm&quot; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm [ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completion 12$ nvm install node # 安装nodejs$ npm config set registry http://registry.npm.taobao.org/ # 设置淘宝镜像","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"node","slug":"node","permalink":"https://blog.xx996.top/tags/node/"},{"name":"nvm","slug":"nvm","permalink":"https://blog.xx996.top/tags/nvm/"}]},{"title":"使用typescript与webpack搭建开发环境(三)","slug":"ts/使用typescript与webpack搭建开发环境(三)","date":"2021-09-10T12:31:17.000Z","updated":"2022-11-29T02:14:12.598Z","comments":true,"path":"article/9bb384a9.html","link":"","permalink":"https://blog.xx996.top/article/9bb384a9.html","excerpt":"","text":"开发环境设置 上一章 在日常开发的过程中，debug是避免不了的，我们都知道webpack是把文件打包了的，对于debug来说是非常不方便的，本章主要说一下怎么debug 准备环境修改 webpack.config.js123module.exports = &#123; // mode: &quot;development&quot; &#125; 把这行代码注释掉 新增一个ts文件在src目录下新增一个名为Person.ts的文件，内容如下 修改index.ts文件之前的代码全部注释或删除，新增以下内容 内容准备完成，现在来启动项目实践debug 启动调试执行yarn start 现在开始调试项目 启动之后我们会发现在终端中会出现这样一个提示，出现这个提示的原因是因为我们在第一步修改的webpack.config.js文件，webpack不知道该以什么模式启动项目了。mode的类型有两个，分别是development和production,分别代表开会环境和正式环境。稍后在进行配置。 接下来打开浏览器会看到控制台 我们在调用方法的时候传入的参数是undefined,所以报这个错了，我们也知道怎么去改，可是在开发项目的过程中不可能每一个地方都记得特别清楚，我们是需要控制台去精准的提示给我们是哪里报凑了，从上图中我们可以看到是main.js文件的第2行报的错，我们点击它定位到错误位置。出现在眼前的是这一行压缩的代码，它是打包过的代码，是不利于调试的。我们要使用devtool来解决这个问题 devtool 选择一种 source map 格式来增强调试过程。不同的值会明显影响到构建(build)和重新构建(rebuild)的速度。 devtool其实就是选择对应的source map，它有很多种，现在来看一下每种都有什么区别。 source-map这种是比较常见的，设置方法就是在webpack.config.js中修改这个属性，代码如下 1234module.exports = &#123; mode: &quot;development&quot;, //恢复设置 devtool: &#x27;source-map&#x27;, &#125; 设置完成之后启动项目看一下效果 精确的提示除了出错的文件和行数，方便我们准确的定位，那webpack究竟是做了什么呢。 source-map会给打包后的模块生成soucemap文件 打包后的模块在最下面引用一个map文件，map文件就是打包后的文件和源文件之间的一个关联文件，里面记录着编译后的代码对应着源码中的位置 inline-source-map 使用inline，webpack不会生成独立的map文件，而是将map文件内容以dataURL的形式插入到打包的文件中 cheap-source-map它与source-map一样也是会生成独立的map文件，不同的是它不包含源代码中的列信息 module-source-map 生成的map文件中还包含引用的一些第三方库 eval-source-map每个模块都被eval执行，并且使用@sourceURL的方式引入map文件不同的环境该使用哪种source-map 不同环境的配置使用，建议参考官方文档,只有官方文档才是最新最准确的 获取代码","categories":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://blog.xx996.top/categories/TypeScript/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"},{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"}]},{"title":"ssl证书结合Nginx搭建https站点(免费证书)","slug":"nginx/ssl证书结合Nginx搭建https站点(免费证书)","date":"2021-09-10T12:30:49.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/915db80e.html","link":"","permalink":"https://blog.xx996.top/article/915db80e.html","excerpt":"","text":"创建ssl证书12345$ mkdir -p /etc/nginx/ssl$ cd /etc/nginx/ssl$ openssl genrsa -idea -out server.key 1024$ openssl req -new -key server.key -out server.csr$ openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt 注意要加过期时间，默认的有效期很短 Nginx 配置12$ cd /etc/nginx/conf.d$ vim https.conf 输入以下内容 12345678910111213141516171819202122server &#123; listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name _; root /usr/share/nginx/html; ssl_certificate &quot;/etc/nginx/ssl/server.crt&quot;; ssl_certificate_key &quot;/etc/nginx/ssl/server.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers PROFILE=SYSTEM; ssl_prefer_server_ciphers on; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 保存退出并重启nginx 因为我们的证书没有给相关机构认证，所以还是提示不安全，但是不影响我们测试使用 如果想部署个人服务器的话可以在各大服务器厂商申请免费的ssl证书，也是很方便的，前提是要有自己的域名。 我是在腾讯云申请的免费ssl证书。按照官网的提示操作很简单的。","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://blog.xx996.top/categories/Nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"},{"name":"https","slug":"https","permalink":"https://blog.xx996.top/tags/https/"}]},{"title":"linux安装Nginx","slug":"nginx/linux安装Nginx","date":"2021-09-10T12:29:22.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/64d53267.html","link":"","permalink":"https://blog.xx996.top/article/64d53267.html","excerpt":"","text":"12$ sudo yum install -y epel-release$ sudo yum install -y nginx 安装成功后，默认的网站目录为： /usr/share/nginx/html 默认的配置文件为：/etc/nginx/nginx.conf 自定义配置文件目录为: /etc/nginx/conf.d/ 开启端口123$ sudo firewall-cmd --permanent --zone=public --add-service=http$ sudo firewall-cmd --permanent --zone=public --add-service=https$ sudo firewall-cmd --reload 开启80和443端口 常用操作 启动Nginx 1$ systemctl start nginx 停止Nginx 1$ systemctl stop nginx 重启Nginx 1$ systemctl restart nginx 查看Nginx状态 1systemctl status nginx 设置开机启动 1$ systemctl enable nginx 禁止开机启动 1$ systemctl disable nginx","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://blog.xx996.top/categories/Nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"}]},{"title":"Nginx代理设置反向代理与缓存","slug":"nginx/Nginx代理与缓存","date":"2021-09-10T12:27:20.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/592ccd47.html","link":"","permalink":"https://blog.xx996.top/article/592ccd47.html","excerpt":"","text":"反向代理123456upstream tomcats &#123; server 127.0.0.1:8001; server 127.0.0.1:8002; server 127.0.0.1:8003;&#125;# 要定义在http模块之内，server模块之外 123456789101112server &#123; listen 80 ; location / &#123; proxy_pass_header Server; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Scheme $scheme; proxy_pass http://tomcats; &#125;&#125; 设置缓存1234567891011121314151617181920212223proxy_cache_path /opt/app/cache levels=1:2 keys_zone=lzz_cache:10m max_size=10g inactive=60m use_temp_path=off;server &#123; location / &#123; expires 1h; proxy_pass_header Server; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Scheme $scheme; proxy_pass http://tomcats; proxy_cache lzz_cache; proxy_cache_valid 200 304 1m; proxy_cache_valid any 10m; proxy_cache_key $host$uri$is_args$args; add_header Nginx-Cache &quot;$upstream_cache_status&quot;; proxy_next_upstream error timeout invalid_header http_500http_502 http_503 http_504; &#125;&#125;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://blog.xx996.top/categories/Nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"proxy","slug":"proxy","permalink":"https://blog.xx996.top/tags/proxy/"},{"name":"cache","slug":"cache","permalink":"https://blog.xx996.top/tags/cache/"}]},{"title":"ubuntu下WebStorm无法输入中文","slug":"os/ubuntu下WebStorm无法输入中文","date":"2021-09-10T12:22:23.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/4f6f6be0.html","link":"","permalink":"https://blog.xx996.top/article/4f6f6be0.html","excerpt":"","text":"你现在使用的输入法具体是什么？另外你是用 ibus 的吗？在启动文件中输入 123export XMODIFIERS=&quot;@im=ibus&quot;export GTK_IM_MODULE=&quot;ibus&quot;export QT_IM_MODULE=&quot;ibus&quot; 然后启动 WebStorm 试试。如果不行的话，你再换成下面的试试。 123export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx 如果还不能解决，参考下面的链接操作一下 https://youtrack.jetbrains.com/issue/IDEA-246833 https://www.jetbrains.com/help/idea/switching-boot-jdk.html https://confluence.jetbrains.com/pages/viewpage.action?pageId=173178989 以上方案由官方提供，亲测好用","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.xx996.top/tags/ubuntu/"},{"name":"webstorm","slug":"webstorm","permalink":"https://blog.xx996.top/tags/webstorm/"}]},{"title":"linux挂载windows共享文件夹","slug":"os/linux挂载windows共享文件夹","date":"2021-09-10T12:20:00.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/e04653fd.html","link":"","permalink":"https://blog.xx996.top/article/e04653fd.html","excerpt":"","text":"创建文件夹 1$ mkdir -p /mnt/share 安装依赖 1$ yum install cifs-utils修改/etc/fstab文件，文件最后加入： 1//192.168.16.32/serverapp /mnt/share cifs defaults 0 0 执行命令 1mount -t cifs -o username=&#x27;administrator&#x27;,password=&#x27;**&#x27; //192.168.16.32/serverapp /mnt/share","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"centos","slug":"centos","permalink":"https://blog.xx996.top/tags/centos/"}]},{"title":"Ubuntu群组管理","slug":"os/Ubuntu群组管理","date":"2021-09-10T12:06:29.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/3e1b66b7.html","link":"","permalink":"https://blog.xx996.top/article/3e1b66b7.html","excerpt":"","text":"群组管理在Linux中，每个用户都有一个群组。 那么新建用户的时候并没有指定群组啊，群组是怎么来的呢。 其实我们不需要设置群组，创建用户的时候会默认创建一个和用户名一样的群组，并且把用户添加到这个群组中。 下面来看一下用户的群组 可以看到第三列和第四列是相同的。第三列是用户名，第四列是群组名。 了解这些之后下面来操作一下群组 新增群组当用户少的时候默认的群组就足以使用了，但是当用户多的时候还是每个用户都在自己的群组中，这种情况就不方便管理了。 下面演示一下新增群组，使用addgroup 命令，用法很简单，在后面直接加上要创建的群组就可以了。记得要用root身份 1$ addgroup admin 看到这个消息，就表示新增成功。 这个时候群组里面还是空的，没有添加用户。 修改用户账户假如我要将 dev 这个用户放到我刚创建的 admin 这个群组里，可以这样写 1$ usermod -g admin dev 可以看到用户dev的群组已经改成了admin 除了使用ll命令之外还可以这样查看用户所在群组 1$ groups dev 也可以不添加用户名，直接使用groups命令，则显示当前用户所在群组 我们也一次把用户添加到多个群组里面，就用-G参数 首先我们先来多创建两个群组，分别是g1和g2 12$ addgroup g1$ addgroup g2 接着运行以下命令 12$ usermod -G admin,dev,g1,g2 dev$ gropus dev 配合 -g 或 -G 参数时，它会把用户从原先的群组里剔除，加入到新的群组。如果不想离开原先的群组，又想加入新的群组，可以在 -G 参数的基础上加上 -a 参数，表示“追加”。 不添加-a的情况 123$ groups dev # 先查看一下用户所在群组$ usermod -G admin dev # 修改用户所在群组$ groups dev # 在一次查询用户所在群组 可以看出，用户的群组只有dev了，之前的群组已经不存在了 添加-a的情况123$ groups dev # 先查看一下用户所在群组$ usermod -aG dev dev # 修改用户所在群组$ groups dev # 在一次查询用户所在群组 可以看出原来的群组还在 删除群组用法很简单，在命令后接想要删除的群组名。 1$ delgroup dev dev已经不再dev群组，因为它已经被删除","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.xx996.top/tags/ubuntu/"}]},{"title":"Ubuntu用户管理","slug":"os/Ubuntu用户管理","date":"2021-09-10T12:04:44.000Z","updated":"2022-11-29T02:14:12.582Z","comments":true,"path":"article/c5a6ae78.html","link":"","permalink":"https://blog.xx996.top/article/c5a6ae78.html","excerpt":"","text":"新增用户 adduser命令，添加新的用户 这个命令很容易理解，顾名思义：add是添加的意思，user是用户的意思，合在一起就是adduser 添加用户，用法也很简单，命令后面直接写上要添加的用户名 1$ adduser frank 只需输入密码，然后一路回车，最后输入y完成新增用户 如果使用个人用户是没有权限操作的，只能使用root用户 现在可以查看home目录下，会发现多出一个frank的文件夹 修改密码拿到管理员给创建的用户之后，一般情况下我们都要修改一下默认密码，修改密码的命令是passwd ，用法和adduser类似，后面加上用户名即可。 下面修改一下frank的默认密码 1$ passwd frank 命令后面也可以不加用户名，默认是当前用户 删除用户能添加用户，那就肯定可以删除用户的，下面就使用deluser命令来删除用户 deluser 是 delete 和 user 的缩写，delete 是删除的意思，user 是用户的意思。合在一起就是删除用户 用法和adduser是一样的，如下 1$ deluser frank 一行命令成功删除 可以看到删除用户是没有确认过程的，所以要慎用 这个时候在查看一下home目录查看一下用户文件夹还有几个 只使用deluser是不会删除用户目录的，如果想把目录文件一块删除，需要增加一个参数 1deluser --remove-home frank","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.xx996.top/tags/ubuntu/"}]},{"title":"微信扫一扫登录","slug":"WeChat/微信扫一扫登录","date":"2021-09-10T03:06:48.000Z","updated":"2022-11-29T02:14:12.566Z","comments":true,"path":"article/43aabf4e.html","link":"","permalink":"https://blog.xx996.top/article/43aabf4e.html","excerpt":"","text":"个人网站是无法接入微信扫一扫登录的，只能使用曲线救国的方式，采用小程序了，小程序是可以获取到微信用户的 UnionID 的。 首先第一步要注册一个小程序应用，很简单的，用邮箱申请即可，点击注册 注册完成之后就可以进行开发了，我后台服务使用的是node来写的 生成小程序二维码 要做扫一扫登录，二维码是不可少的，官方也提供了几种生成二维码的方式。查看生成方式 我使用的是A接口，详细信息可查看官方文档。 1POST https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN 从api上可以看出，调用这个接口需要传入成一个 ACCESS_TOKEN ，这个不是我们生成的，需要调用小程序的服务来获取到。 ACCESS_TOKEN 获取 ACCESS_TOKEN 示例 123456789101112const getWeChatAccessToken = () =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; let url = `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$&#123;appId&#125;&amp;secret=$&#123;secretKey&#125;` axios.get(url).then(res =&gt; &#123; resolve(res.data) &#125;).catch(e =&gt; &#123; errorlog.error(e) resolve(Common.unifyResponse(&quot;获取微信token失败&quot;, 500)) &#125;) &#125; &#125;)&#125; token过期的时间是由微信服务控制的，拿到之后可以存到redis中，不需要每次都去获取新的 获取到token之后就可以调用生成二维码的方法了 调用示例 123456789101112131415161718192021 const getQRCode = (access_token) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; let fileName = Common.randomNumber() let url = `https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=$&#123;access_token&#125;` axios.request(&#123; method: &#x27;post&#x27;, responseType: &#x27;arraybuffer&#x27;, url, data: &#123; path: &#x27;pages/login/login?clientId=&#x27;+fileName &#125; &#125;).then(res =&gt; &#123; fs.writeFile(Common.config(&quot;qrCode&quot;) + fileName + &quot;.jpeg&quot;, res.data, &quot;binary&quot;, function (err) &#123; resolve(fileName) &#125;); &#125;).catch(e =&gt; &#123; errorlog.error(e) resolve(Common.unifyResponse(&quot;获取二维码失败&quot;, 500)) &#125;) &#125;)&#125; 返回的是二维码的文件名称 1234567891011 LoginRouter.post(&quot;/qrlogin/:clientId&quot;, (req, res) =&gt; &#123; let userId = req[&quot;userId&quot;]; let clientId = req.params.clientId let token = makeToken(userId); axios.post(apiConfig.socketUrl, &#123; clientId, message: token &#125;) res.send(true)&#125;) 处理登录请求，在小程序完成授权之后，调用webSocket服务通知页面授权成功，跳转到首页 页面显示二维码 12345678910111213141516171819202122232425$.ajax(&#123; url: api, type: &#x27;get&#x27;, success: function (data) &#123; $(&#x27;#qrcode&#x27;).attr(&quot;src&quot;,&quot;/&quot;+data + &quot;.jpeg&quot;) webSocketConnect(data) &#125;&#125;)function webSocketConnect(clientId) &#123; if (&#x27;WebSocket&#x27; in window) &#123; ws = new WebSocket(SOCKET_URL + clientId); &#125; else if (&#x27;MozWebSocket&#x27; in window) &#123; ws = new WebSocket(SOCKET_URL + clientId); &#125; else &#123; alert(&quot;该浏览器不支持websocket&quot;); &#125; ws.onmessage = function (evt) &#123; localStorage.setItem(&quot;accessToken&quot;, evt.data) window.location.href = &#x27;me.html&#x27; &#125;;&#125; 登录页面调用服务器端生成二维码并显示在页面上，并且连接webSocket服务，等待服务器确认登录。 小程序 login.js 12345678910111213141516171819202122 Page(&#123; onLoad: function (options) &#123; const scene = decodeURIComponent(options.clientId); wx.setStorage(&#123; key: &quot;clientId&quot;, data: scene &#125;) &#125;, login: async function (e) &#123; let result = await util.getLoginInfo() if (result) &#123; let clientId = wx.getStorageSync(&#x27;clientId&#x27;) await util.httpRequest(&#123; method: &#x27;post&#x27;, url: &#x27;api/wx/qrlogin/&#x27; + clientId &#125;) wx.switchTab(&#123; url: &#x27;../index/index&#x27; &#125;) &#125; &#125;&#125;)login.wxml 1&lt;button open-type=&quot;getUserInfo&quot; bindgetuserinfo=&quot;login&quot;&gt;授权登录&lt;/button&gt; github 体验地址","categories":[],"tags":[{"name":"wechat","slug":"wechat","permalink":"https://blog.xx996.top/tags/wechat/"},{"name":"小程序","slug":"小程序","permalink":"https://blog.xx996.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"node","slug":"node","permalink":"https://blog.xx996.top/tags/node/"}]}],"categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://blog.xx996.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"html","slug":"html","permalink":"https://blog.xx996.top/categories/html/"},{"name":"Java","slug":"Java","permalink":"https://blog.xx996.top/categories/Java/"},{"name":"docker","slug":"docker","permalink":"https://blog.xx996.top/categories/docker/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.xx996.top/categories/Nginx/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/categories/JavaScript/"},{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/categories/%E5%B7%A5%E5%85%B7/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://blog.xx996.top/categories/TypeScript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"https://blog.xx996.top/tags/typescript/"},{"name":"java","slug":"java","permalink":"https://blog.xx996.top/tags/java/"},{"name":"mq","slug":"mq","permalink":"https://blog.xx996.top/tags/mq/"},{"name":"tool","slug":"tool","permalink":"https://blog.xx996.top/tags/tool/"},{"name":"git","slug":"git","permalink":"https://blog.xx996.top/tags/git/"},{"name":"springboot","slug":"springboot","permalink":"https://blog.xx996.top/tags/springboot/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.xx996.top/tags/nginx/"},{"name":"websocket","slug":"websocket","permalink":"https://blog.xx996.top/tags/websocket/"},{"name":"jpa","slug":"jpa","permalink":"https://blog.xx996.top/tags/jpa/"},{"name":"工具","slug":"工具","permalink":"https://blog.xx996.top/tags/%E5%B7%A5%E5%85%B7/"},{"name":"js","slug":"js","permalink":"https://blog.xx996.top/tags/js/"},{"name":"Ruby","slug":"Ruby","permalink":"https://blog.xx996.top/tags/Ruby/"},{"name":"Ruby on Rails","slug":"Ruby-on-Rails","permalink":"https://blog.xx996.top/tags/Ruby-on-Rails/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.xx996.top/tags/Linux/"},{"name":"SSH","slug":"SSH","permalink":"https://blog.xx996.top/tags/SSH/"},{"name":"vue","slug":"vue","permalink":"https://blog.xx996.top/tags/vue/"},{"name":"linux","slug":"linux","permalink":"https://blog.xx996.top/tags/linux/"},{"name":"vite","slug":"vite","permalink":"https://blog.xx996.top/tags/vite/"},{"name":"rails","slug":"rails","permalink":"https://blog.xx996.top/tags/rails/"},{"name":"jenkins","slug":"jenkins","permalink":"https://blog.xx996.top/tags/jenkins/"},{"name":"聚合数据","slug":"聚合数据","permalink":"https://blog.xx996.top/tags/%E8%81%9A%E5%90%88%E6%95%B0%E6%8D%AE/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.xx996.top/tags/JavaScript/"},{"name":"github","slug":"github","permalink":"https://blog.xx996.top/tags/github/"},{"name":"html","slug":"html","permalink":"https://blog.xx996.top/tags/html/"},{"name":"node","slug":"node","permalink":"https://blog.xx996.top/tags/node/"},{"name":"docker","slug":"docker","permalink":"https://blog.xx996.top/tags/docker/"},{"name":"mysql","slug":"mysql","permalink":"https://blog.xx996.top/tags/mysql/"},{"name":"css","slug":"css","permalink":"https://blog.xx996.top/tags/css/"},{"name":"webpack","slug":"webpack","permalink":"https://blog.xx996.top/tags/webpack/"},{"name":"wechat","slug":"wechat","permalink":"https://blog.xx996.top/tags/wechat/"},{"name":"gitee","slug":"gitee","permalink":"https://blog.xx996.top/tags/gitee/"},{"name":"email","slug":"email","permalink":"https://blog.xx996.top/tags/email/"},{"name":"maven","slug":"maven","permalink":"https://blog.xx996.top/tags/maven/"},{"name":"gpg","slug":"gpg","permalink":"https://blog.xx996.top/tags/gpg/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://blog.xx996.top/tags/JetBrains/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.xx996.top/tags/ssh/"},{"name":"nexus","slug":"nexus","permalink":"https://blog.xx996.top/tags/nexus/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://blog.xx996.top/tags/mybatis-plus/"},{"name":"异常","slug":"异常","permalink":"https://blog.xx996.top/tags/%E5%BC%82%E5%B8%B8/"},{"name":"es6","slug":"es6","permalink":"https://blog.xx996.top/tags/es6/"},{"name":"es5","slug":"es5","permalink":"https://blog.xx996.top/tags/es5/"},{"name":"babel","slug":"babel","permalink":"https://blog.xx996.top/tags/babel/"},{"name":"nvm","slug":"nvm","permalink":"https://blog.xx996.top/tags/nvm/"},{"name":"https","slug":"https","permalink":"https://blog.xx996.top/tags/https/"},{"name":"proxy","slug":"proxy","permalink":"https://blog.xx996.top/tags/proxy/"},{"name":"cache","slug":"cache","permalink":"https://blog.xx996.top/tags/cache/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.xx996.top/tags/ubuntu/"},{"name":"webstorm","slug":"webstorm","permalink":"https://blog.xx996.top/tags/webstorm/"},{"name":"centos","slug":"centos","permalink":"https://blog.xx996.top/tags/centos/"},{"name":"小程序","slug":"小程序","permalink":"https://blog.xx996.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]}